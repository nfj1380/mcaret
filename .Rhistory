if (model_list[[i]]$spec$mode == "regression") {
label <- response_name
shapobj <- shapobj_list[[i]]
interaction_plots <- future_lapply(y_features, function(y_feature) {
interaction_label <- paste(response_name, sep = " - ")
interaction_plot <- sv_dependence2D(shapobj, x_features, y_feature, interactions = interactions) + labs(title = interaction_label)
return(interaction_plot)
})
return(do.call(gridExtra::grid.arrange, interaction_plots))
} else {
class_list <- shapobj_list[[i]]
interaction_plots <- list()
for (y_feature in y_features) {
interaction_plots_for_feature <- future_lapply(names(class_list), function(class_name) {
if (!is.null(class_selection) && !(class_name %in% class_selection)) {
return(NULL)
}
class_obj <- class_list[[class_name]]
interaction_label <- paste(response_name, class_name, sep = " - ")
interaction_plot <- sv_dependence2D(class_obj, x_features, y_feature, interactions = interactions) + labs(title = interaction_label)
return(interaction_plot)
},future.seed = TRUE)
interaction_plots_for_feature <- interaction_plots_for_feature[!future_sapply(interaction_plots_for_feature, is.null)]
interaction_plots <- c(interaction_plots, interaction_plots_for_feature)
}
if (length(interaction_plots) > 0) {
return(do.call(gridExtra::grid.arrange, interaction_plots))
} else {
return(NULL)
}
}
},future.seed = TRUE)
plots_with_labels <- c(plots_with_labels, interaction_plots_with_labels)
}
print("After interaction plots.")
# END OF INTERACTION EFFECT PLOT FUNCTION
# Stop parallel processing
future::plan(future::sequential)
ncol <- max(1, ceiling(sqrt(length(plots_with_labels))))
# Create the final plot by stacking responses
final_plot <- do.call(gridExtra::grid.arrange, c(plots_with_labels, ncol = ncol))
final.plot <- as.ggplot(final_plot)
if (getFeaturePlot) {
if (kind == "beeswarm") {
final.plot <- final.plot +
labs(title="Feature Effect Plot")+
theme(plot.title.position = "plot")
} else if (kind == "bar") {
final.plot <- final.plot +
labs(title="Feature Importance Plot")+
theme(plot.title.position = "plot")
} else if (kind == "both") {
final.plot <- final.plot +
labs(title="Feature Effect and Importance Plot")+
theme(plot.title.position = "plot")
}
}
if (getDependencyPlot) {
final.plot <- final.plot +
labs(title="Dependency Plot")+
theme(plot.title.position = "plot")
}
if (getInteractionPlot) {
final.plot <- final.plot +
labs(title="Interaction Effect Plot")+
theme(plot.title.position = "plot")
}
return(final.plot)
}
shapTest=MrShapely(yhats_rf, MultRespVars = X1,
taxa = 2, # taxa=NULL, taxa=1:2 or 1:3 or 1:4, and taxa=1 or 2 or 3 or 4 will only work if only getFeaturePlot = T and rest is false
y_features = c("Plas","Hkillangoi"), #feature set here should be different from taxa for JSDM
x_features = c("Microfilaria"),#, "Hzosteropis","Plas"),
#x_features= c("Microfilaria", "Hzosteropis","Plas") # features here should be different from taxa for for JSDM
kind = "both",
max_display = 4L,
interactions = FALSE, #keep false and only use and set to true for Xgboost
num_cores = 6,
class_selection = 1,
getFeaturePlot = T,
getDependencyPlot = T,
getInteractionPlot = T)
shapTest=MrShapely(yhats_rf, MultRespVars = X1,
taxa = 1:4, # taxa=NULL, taxa=1:2 or 1:3 or 1:4, and taxa=1 or 2 or 3 or 4 will only work if only getFeaturePlot = T and rest is false
y_features = c("Plas","Hkillangoi"), #feature set here should be different from taxa for JSDM
x_features = c("Microfilaria"),#, "Hzosteropis","Plas"),
#x_features= c("Microfilaria", "Hzosteropis","Plas") # features here should be different from taxa for for JSDM
kind = "both",
max_display = 4L,
interactions = FALSE, #keep false and only use and set to true for Xgboost
num_cores = 6,
class_selection = 1,
getFeaturePlot = T,
getDependencyPlot = T,
getInteractionPlot = T)
shapTest=MrShapely(yhats_rf, MultRespVars = X1,
taxa = 1:3, # taxa=NULL, taxa=1:2 or 1:3 or 1:4, and taxa=1 or 2 or 3 or 4 will only work if only getFeaturePlot = T and rest is false
y_features = c("Plas","Hkillangoi"), #feature set here should be different from taxa for JSDM
x_features = c("Microfilaria"),#, "Hzosteropis","Plas"),
#x_features= c("Microfilaria", "Hzosteropis","Plas") # features here should be different from taxa for for JSDM
kind = "both",
max_display = 4L,
interactions = FALSE, #keep false and only use and set to true for Xgboost
num_cores = 6,
class_selection = 1,
getFeaturePlot = T,
getDependencyPlot = T,
getInteractionPlot = T)
shapTest=MrShapely(yhats_rf, MultRespVars = X1,
#taxa = 1:3, # taxa=NULL, taxa=1:2 or 1:3 or 1:4, and taxa=1 or 2 or 3 or 4 will only work if only getFeaturePlot = T and rest is false
y_features = c("Plas","Hkillangoi"), #feature set here should be different from taxa for JSDM
x_features = c("Microfilaria"),#, "Hzosteropis","Plas"),
#x_features= c("Microfilaria", "Hzosteropis","Plas") # features here should be different from taxa for for JSDM
kind = "both",
max_display = 4L,
interactions = FALSE, #keep false and only use and set to true for Xgboost
num_cores = 6,
class_selection = 1,
getFeaturePlot = T,
getDependencyPlot = T,
getInteractionPlot = T)
shapTest=MrShapely(yhats_rf, MultRespVars = X1,
#taxa = 1:3, # taxa=NULL, taxa=1:2 or 1:3 or 1:4, and taxa=1 or 2 or 3 or 4 will only work if only getFeaturePlot = T and rest is false
y_features = c("Plas","Hkillangoi"), #feature set here should be different from taxa for JSDM
x_features = c("Microfilaria"),#, "Hzosteropis","Plas"),
#x_features= c("Microfilaria", "Hzosteropis","Plas") # features here should be different from taxa for for JSDM
kind = "both",
max_display = 4L,
interactions = FALSE, #keep false and only use and set to true for Xgboost
num_cores = 6,
class_selection = 1,
getFeaturePlot = T,
getDependencyPlot = F,
getInteractionPlot = F)
devtools::document()
rm(list = c("MrShapely"))`
)
''
'
''
``
rm(list = c("MrShapely"))
devtools::document()
setwd("~/MrIML")
Y <- readRDS("Y_chr21mriml2.rds")
Y <- readRDS("Y_10snps.rds")
setwd("~/MrIML")
Y <- readRDS("Y_10snps.rds")
Y <- readRDS("Y_10snps.csv")
Y <- read.csv("Y_10snps.csv")
X <- read.table("X20k_UV4PCs.csv", sep=" ", header=T)
#3924 SNPs in Y....MrIML2 cannot handle that big of a dataset so making it 1000SNPs...will figure out a better way to restrict later
Ysmall <- Y[1:100]
#3924 SNPs in Y....MrIML2 cannot handle that big of a dataset so making it 1000SNPs...will figure out a better way to restrict later
Ysmall <- Y[1:1001]
View(Y)
View(Y)
Y <- read.csv("Y_10snps.csv")
View(X)
View(Y)
Ysmall <- Y[1:1001]
sum(is.na(Y))
Yrecode <- Y
#alternate dominant model
sum(Yrecode == 1)
Yrecode[Yrecode==2] <- 1
#alternate dominant model
sum(Yrecode == 2)
X1_fact <- X1 %>%
mutate_all(as.factor)
pacman::p_load('MRFcov', 'mrIML', 'tidyverse', 'future.apply','tidymodels', 'finetune', 'themis', 'vip', 'flashlight', 'iml', 'vivid', 'igraph', 'ggnetwork', 'network',
'gridExtra', 'xgboost', 'brulee', 'fastshap', 'tabnet', 'bonsai',
'parsnip', 'cowplot', 'progress', 'hstats', 'geosphere')
X1_fact <- Y %>%
mutate_all(as.factor)
View(X)
X <- read.table("X20k_UV4PCs.csv", sep=" ", header=T, row.names = 1)
View(X)
model_rf <- rand_forest(trees = 100, mode = "classification",
mtry = tune(), min_n = tune()) %>%
set_engine("randomForest")
cl <- parallel::makeCluster(4)
plan(cluster, workers=cl)
yhats_rf <- mrIMLpredicts(X=X, Y=Yalt,
Model=model_rf, balance_data='no',
mode='classification',seed = 123,
prop=0.7, k=10, tune_grid_size = 10,
morans=F, racing=T)
yhats_rf <- mrIMLpredicts(X=X, Y=Y,
Model=model_rf, balance_data='no',
mode='classification',seed = 123,
prop=0.7, k=10, tune_grid_size = 10,
morans=F, racing=T)
yhats_rf <- mrIMLpredicts(X=X, Y=Yrecode,
Model=model_rf, balance_data='no',
mode='classification',seed = 123,
prop=0.7, k=10, tune_grid_size = 10,
morans=F, racing=T)
str(Y)
str(X)
glimpse(Y)
Y <- read.csv("Y_10snps.csv", row.names = 1)
sum(is.na(Y))
Y[is.na(Y)] <- 0
Yrecode <- Y
#alternate dominant model
sum(Yrecode == 2)
glimpse(Yrecode)
yhats_rf <- mrIMLpredicts(X=X, Y=Yrecode,
Model=model_rf, balance_data='no',
mode='classification',seed = 123,
prop=0.7, k=10, tune_grid_size = 10,
morans=F, racing=T)
mrIMLperformance(yhats_rf, Y)
mrIMLperformance(yhats_rf, X, mode = 'classification')
mrIMLperformance(yhats_rf, X=X,Y=Y mode = 'classification')
mrIMLperformance(yhats_rf, X=X,Y=Y, mode = 'classification')
mrIMLperformance(yhats_rf,Y=Y, mode = 'classification')
mrIMLperformance(yhats_rf,Y=Y,Model=model_rf, mode = 'classification')
num_bootstrap = 1
feature = names(X)[1]
num_bootstrap = 1
feature
top.int = 10
k=1
features <- colnames(yhats[[k]]$data)[-1]
yhats=yhats_rf
features <- colnames(yhats[[k]]$data)[-1]
n <- nrow(yhats[[k]]$data)
int_raw <- list()
if (is.na(num_bootstrap) || num_bootstrap == 1) {
bootstrap_sample <- yhats[[k]]$data
}
for (i in 1:num_bootstrap) {
if (num_bootstrap > 1) {
bootstrap_sample <- yhats[[k]]$data[sample(1:n,
replace = TRUE), ]
wflow <- yhats[[k]]$last_mod_fit %>% tune::extract_workflow()
wflow$data <- bootstrap_sample
model_fit <- fit(wflow, data = bootstrap_sample)
}
else {
model_fit <- yhats[[k]]$mod1_k %>% extract_fit_parsnip()
}
metrics <- list(logloss = MetricsWeighted::logLoss,
`ROC AUC` = MetricsWeighted::AUC, `% Dev Red` = MetricsWeighted::r_squared_bernoulli)
var_names <- names(yhats[[k]]$data)[-1]
pred_fun <- function(m, dat) {
predict(m, dat[, colnames(bootstrap_sample)[-1],
drop = FALSE], type = "prob")$.pred_1
}
s <- hstats(model_fit, v = names(yhats[[k]]$data_train)[-1],
X = yhats[[k]]$data_train, pred_fun = pred_fun,
n_max = 300, pairwise_m = length(names(yhats[[k]]$data_train)[-1]),
threeway_m = 0, verbose = F)
}
features <- colnames(yhats[[k]]$data)[-1]
n <- nrow(yhats[[k]]$data)
bootstrap_sample <- yhats[[k]]$data[sample(1:n,
replace = TRUE), ]
wflow <- yhats[[k]]$last_mod_fit %>% tune::extract_workflow()
wflow$data <- bootstrap_sample
model_fit <- fit(wflow, data = bootstrap_sample)
metrics <- list(logloss = MetricsWeighted::logLoss,
`ROC AUC` = MetricsWeighted::AUC, `% Dev Red` = MetricsWeighted::r_squared_bernoulli)
var_names <- names(yhats[[k]]$data)[-1]
pred_fun <- function(m, dat) {
predict(m, dat[, colnames(bootstrap_sample)[-1],
drop = FALSE], type = "prob")$.pred_1
}
s <- hstats(model_fit, v = names(yhats[[k]]$data_train)[-1],
X = yhats[[k]]$data_train, pred_fun = pred_fun,
n_max = 300, pairwise_m = length(names(yhats[[k]]$data_train)[-1]),
threeway_m = 0, verbose = F)
overall <- data.frame(response = names(Y[k]), overall = h2(s)[[1]],
bs = i)
overall
one_way <- data.frame(one_way=h2_overall(s, plot = FALSE)[[1]]) %>%
rownames_to_column("predictor")
one_way
metadata <- data.frame(response = rep(names(Y[k]),
nrow(one_way)), bstrap = rep(i, nrow(one_way)))
one_way_df <- cbind(one_way, metadata)
one_way_df
two_way <- data.frame(two_way_int=h2_pairwise(s, plot = FALSE)[[1]])%>%
rownames_to_column("predictor") #top_m = inf)
meta_data2 <- data.frame(response = rep(names(Y[k])),
bstrap = rep(i, nrow(two_way)))
two_way_df <- cbind(two_way, meta_data2)
two_way_df
Y <- dplyr::select(Bird.parasites, -scale.prop.zos)%>%
dplyr::select(sort(names(.)))#response variables eg. SNPs, pathogens, species....
pacman::p_load('MRFcov', 'mrIML', 'tidyverse', 'future.apply','tidymodels', 'finetune',
'themis', 'vip', 'flashlight', 'iml', 'vivid', 'igraph', 'ggnetwork', 'network',
'gridExtra', 'xgboost', 'brulee', 'fastshap', 'tabnet', 'bonsai',
'parsnip','data.table', 'cowplot', 'progress', 'hstats', 'geosphere',
'DALEX', 'ingredients', 'shapr', 'shapviz', 'cowplot','kernelshap', 'doParallel',
'kernelshap', 'svMisc', 'ggplotify')
setwd("~/MrIML")
Y <- dplyr::select(Bird.parasites, -scale.prop.zos)%>%
dplyr::select(sort(names(.)))#response variables eg. SNPs, pathogens, species....
X <- dplyr::select(Bird.parasites, scale.prop.zos) # feature set
X1 <- Y %>%
dplyr::select(sort(names(.)))
model_rf <-
rand_forest(trees = 100, mode = "classification", mtry = tune(), min_n = tune()) %>% #100 trees are set for brevity. Aim to start with 1000
set_engine("randomForest")
cl <- parallel::makeCluster(5)
plan(cluster, workers=cl)
cl <- parallel::makeCluster(4)
plan(cluster, workers=cl)
yhats_rf <- mrIMLpredicts(X=X, Y=Y,
X1=X1,
Model=model_rf , #lm/xgb not working on avian malaria
balance_data='no',
mode='classification',
tune_grid_size=5,
seed = sample.int(1e8, 1),
morans=F,
prop=0.7, k=5, racing=T)
ModelPerf <- mrIMLperformance(yhats_rf, Model=model_rf, Y=Y, mode='classification')
int_ <- mrInteractions(yhats=yhats_rf, X, Y, num_bootstrap=4,
feature = 'Plas', top.int=5)
int_[[1]] #
int_[[2]]
int_[[3]]
install.packages("hstats")
pacman::p_load('MRFcov', 'mrIML', 'tidyverse', 'future.apply','tidymodels', 'finetune',
'themis', 'vip', 'flashlight', 'iml', 'vivid', 'igraph', 'ggnetwork', 'network',
'gridExtra', 'xgboost', 'brulee', 'fastshap', 'tabnet', 'bonsai',
'parsnip','data.table', 'cowplot', 'progress', 'hstats', 'geosphere',
'DALEX', 'ingredients', 'shapr', 'shapviz', 'cowplot','kernelshap', 'doParallel',
'kernelshap', 'svMisc', 'ggplotify')
int_ <- mrInteractions(yhats=yhats_rf, X, Y, num_bootstrap=4,
feature = 'Plas', top.int=5)
yhats=yhats_rf
num_bootstrap=4
feature = 'Plas'
top.int=5
n_response <- length(yhats)
pb <- txtProgressBar(min = 0, max = n_response, style = 3)
internal_fit_function <- function(k) {
setTxtProgressBar(pb, k)
features <- colnames(yhats[[k]]$data)[-1]
n <- nrow(yhats[[k]]$data)
int_raw <- list()
if (is.na(num_bootstrap) || num_bootstrap == 1) {
bootstrap_sample <- yhats[[k]]$data
}
for (i in 1:num_bootstrap) {
if (num_bootstrap > 1) {
bootstrap_sample <- yhats[[k]]$data[sample(1:n,
replace = TRUE), ]
wflow <- yhats[[k]]$last_mod_fit %>% tune::extract_workflow()
wflow$data <- bootstrap_sample
model_fit <- fit(wflow, data = bootstrap_sample)
}
else {
model_fit <- yhats[[k]]$mod1_k %>% extract_fit_parsnip()
}
metrics <- list(logloss = MetricsWeighted::logLoss,
`ROC AUC` = MetricsWeighted::AUC, `% Dev Red` = MetricsWeighted::r_squared_bernoulli)
var_names <- names(yhats[[k]]$data)[-1]
pred_fun <- function(m, dat) {
predict(m, dat[, colnames(bootstrap_sample)[-1],
drop = FALSE], type = "prob")$.pred_1
}
s <- hstats(model_fit, v = names(yhats[[k]]$data_train)[-1],
X = yhats[[k]]$data_train, pred_fun = pred_fun,
n_max = 300, pairwise_m = length(names(yhats[[k]]$data_train)[-1]),
threeway_m = 0, verbose = F)
overall <- data.frame(response = names(Y[k]), overall = h2(s)[[1]],
bs = i)
one_way <- data.frame(one_way=h2_overall(s, plot = FALSE)[[1]]) %>%
rownames_to_column("predictor")
metadata <- data.frame(response = rep(names(Y[k]),
nrow(one_way)), bstrap = rep(i, nrow(one_way)))
one_way_df <- cbind(one_way, metadata)
two_way <- data.frame(two_way_int=h2_pairwise(s, plot = FALSE)[[1]])%>%
rownames_to_column("predictor") #top_m = inf)
meta_data2 <- data.frame(response = rep(names(Y[k])),
bstrap = rep(i, nrow(two_way)))
two_way_df <- cbind(two_way, meta_data2)
interaction_objects <- list(overall_int = overall,
one_way_int = one_way_df, two_way_int = two_way_df)
int_raw[[i]] <- interaction_objects
}
return(int_raw)
}
bstraps_int_list <- future_lapply(seq(1, n_response), internal_fit_function,
future.seed = TRUE)
bs_list_overall <- lapply(bstraps_int_list, function(sublist) {
extracted_overall_int <- map(sublist, pluck, "overall_int")
do.call(rbind, extracted_overall_int)
})
overall_int_final <- do.call(rbind, bs_list_overall)
top_int_overall <- overall_int_final %>% group_by(response) %>%
summarize(avg_Int = mean(overall), .groups = "drop")
top_int_overall_ordered <- top_int_overall %>% arrange(desc(avg_Int)) %>%
dplyr::slice(1:top.int)
top_names <- top_int_overall_ordered$response
overall_int_final_top <- overall_int_final %>% dplyr::filter(response %in%
top_names)
p1 <- ggplot(overall_int_final_top, aes(x = reorder(response,
-overall), y = overall)) + geom_boxplot() + labs(title = "Overall interactions",
x = "Response", y = "Overall") + theme_bw()
bs_list_one_way <- lapply(bstraps_int_list, function(sublist) {
extracted_one_way_int <- map(sublist, pluck, "one_way_int")
do.call(rbind, extracted_one_way_int)
})
p1
overall_one_way_final <- do.call(rbind, bs_list_one_way)
filtered_one_way <- overall_one_way_final %>% dplyr::filter(response ==
feature)
top_int_one_way <- filtered_one_way %>% group_by(response,
predictor) %>% summarize(avg_Int = mean(one_way), .groups = "drop")
top_int_one_way_ordered <- top_int_one_way %>% arrange(desc(avg_Int)) %>%
dplyr::slice(1:top.int)
top_names_one_way <- top_int_one_way_ordered$predictor
one_way_int_final_top <- filtered_one_way %>% dplyr::filter(predictor %in%
top_names_one_way)
p2 <- ggplot(one_way_int_final_top, aes(x = reorder(predictor,
-two_way_int), y = two_way_int)) + geom_boxplot() + labs(title = paste(feature,
"one-way interactions", sep = " "), x = feature, y = paste(feature,
"interaction importance", sep = " ")) + theme_bw()
p2
one_way_int_final_top
p2 <- ggplot(one_way_int_final_top, aes(x = reorder(predictor,
-one_way), y = two_way_int)) + geom_boxplot() + labs(title = paste(feature,
"one-way interactions", sep = " "), x = feature, y = paste(feature,
"interaction importance", sep = " ")) + theme_bw()
p2
p2 <- ggplot(one_way_int_final_top, aes(x = reorder(predictor,
-one_way), y = one_way)) + geom_boxplot() + labs(title = paste(feature,
"one-way interactions", sep = " "), x = feature, y = paste(feature,
"interaction importance", sep = " ")) + theme_bw()
p2
avg_v_by_response <- overall_one_way_final %>% group_by(response,
predictor) %>% summarize(avg_oneway = mean(one_way), .groups = "drop") %>%
arrange(desc(avg_V1)) %>% dplyr::slice(1:top.int)
avg_v_by_response <- overall_one_way_final %>% group_by(response,
predictor) %>% summarize(avg_oneway = mean(one_way), .groups = "drop") %>%
arrange(desc(avg_oneway)) %>% dplyr::slice(1:top.int)
avg_v_by_response
p2_com <- ggplot(avg_v_by_response, aes(x = reorder(predictor,
-avg_oneway), y = avg_oneway)) + geom_boxplot() + labs(title = "Community-level one-way interactions",
x = "Predictors", y = "Community interaction importance") +
theme_bw()
p2_com
top.int
avg_v_by_response
op.int
top.int
combined_plot_one_way <- plot_grid(p2, p2_com, ncol = 2)
combined_plot_one_way
bs_list_two_way <- lapply(bstraps_int_list, function(sublist) {
extracted_two_way_int <- map(sublist, pluck, "two_way_int")
do.call(rbind, extracted_two_way_int)
})
overall_two_way_final <- do.call(rbind, bs_list_two_way)
filtered_two_way <- overall_two_way_final %>% dplyr::filter(response ==
feature)
top_int_two_way_ordered <- top_int_two_way %>% arrange(desc(avg_Int)) %>%
dplyr::slice(1:top.int)
top_names_two_way
top_int_two_way
top_int_two_way <- filtered_two_way %>% group_by(response,
predictor) %>% summarize(avg_Int2 = mean(two_way_int), .groups = "drop")
top_int_two_way_ordered <- top_int_two_way %>% arrange(desc(avg_Int)) %>%
dplyr::slice(1:top.int)
top_int_two_way
top_int_two_way_ordered <- top_int_two_way %>% arrange(desc(avg_Int2)) %>%
dplyr::slice(1:top.int)
top_int_two_way_ordered
top_names_two_way <- top_int_two_way_ordered$predictor
p3 <- ggplot(two_way_int_final_top, aes(x = reorder(predictor,
-avg_Int2 ), y = avg_Int2 )) + geom_boxplot() + labs(title = paste(feature,
"two-way interactions", sep = " "), x = feature, y = paste(feature,
"interaction importance", sep = " ")) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
two_way_int_final_top <- filtered_two_way %>% filter(predictor %in%
top_names_two_way)
p3 <- ggplot(two_way_int_final_top, aes(x = reorder(predictor,
-avg_Int2 ), y = avg_Int2 )) + geom_boxplot() + labs(title = paste(feature,
"two-way interactions", sep = " "), x = feature, y = paste(feature,
"interaction importance", sep = " ")) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p3
two_way_int_final_top
p3 <- ggplot(two_way_int_final_top, aes(x = reorder(predictor,
-two_way_int ), y = two_way_int )) + geom_boxplot() + labs(title = paste(feature,
"two-way interactions", sep = " "), x = feature, y = paste(feature,
"interaction importance", sep = " ")) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p3
avg_v_by_response_two_way
avg_v_by_response_two_way <- overall_two_way_final %>% group_by(response,
predictor) %>% summarize(avg_V1 = mean(V1), .groups = "drop") %>%
dplyr::slice(1:top.int)
overall_two_way_final
avg_v_by_response_two_way <- overall_two_way_final %>% group_by(response,
predictor) %>% summarize(avg_twoway = mean(two_way_int), .groups = "drop") %>%
dplyr::slice(1:top.int)
avg_v_by_response_two_way
p3_com <- ggplot(avg_v_by_response_two_way, aes(x = reorder(predictor,
- avg_twoway ), y =  avg_twoway )) + geom_boxplot() + labs(title = "Community-level two-way interactions",
x = "Predictors", y = "Community interaction importance") +
theme_bw() + theme(axis.text.x = element_text(angle = 45,
hjust = 1))
p3_com
combined_plot_two_way <- plot_grid(p3, p3_com, ncol = 2)
combined_plot_two_way
