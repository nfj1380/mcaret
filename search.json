[{"path":"https://github.com/nfj1380/mrIML/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 mrIML team Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://github.com/nfj1380/mrIML/articles/Graphical network model (GNM).html","id":"setting-up-the-models","dir":"Articles","previous_headings":"","what":"Setting up the models","title":"Graphical network model (GNM)","text":"Built MrIML architecture (big advantage Tidymodels) capability change underlying model easily. going set two models compare: random forest model (RF) logistic regression (lm). MrIML takes advantage multi-core processing set run 5 cores. steps MrIML 1.0.","code":"model_rf <-rand_forest(trees = 100,                        mode = \"classification\",                        mtry = tune(),                        min_n = tune()) %>% #100 trees are set for brevity. Aim to start with 1000           set_engine(\"randomForest\")  model_lm <- #model used to generate yhat   logistic_reg() %>%   set_engine(\"glm\") %>%   set_mode(\"classification\") #just for your response  cl <- parallel::makeCluster(5) plan(cluster, workers=cl)"},{"path":"https://github.com/nfj1380/mrIML/articles/Graphical network model (GNM).html","id":"running-the-models","dir":"Articles","previous_headings":"","what":"Running the models","title":"Graphical network model (GNM)","text":"Aside adding JSDM functionality X1 call, also enabled MrIML tune hyperparameters using efficient ‘racing’ option (see Kuhn (2014)). brief, racing option take small subsample parameters eliminates parameter combinations improve fit using repeated measure ANOVA model. Turning racing ‘FALSE’ goes back grid search want manually set tuning grid size. logistic regression parameters tune set ‘FALSE’.","code":"#random forest yhats_rf <- mrIMLpredicts(X=X, Y=Y,                           X1=X1,                           Model=model_rf,                           balance_data='no',                           mode='classification',                           seed = sample.int(1e8, 1),                           morans=F,                           prop=0.7, k=5, racing=T) #>   |                                                                              |                                                                      |   0%  |                                                                              |==================                                                    |  25%  |                                                                              |===================================                                   |  50%  |                                                                              |====================================================                  |  75%  |                                                                              |======================================================================| 100%  #linear model yhats_lm <- mrIMLpredicts(X=X,Y=Y,                             X1=X1_fact,                             Model=model_lm ,                              balance_data='no',                             mode='classification',                             seed = sample.int(1e8, 1),                             prop=0.6, racing=F, k=5) #>   |                                                                              |                                                                      |   0%  |                                                                              |==================                                                    |  25% #> Warning: No tuning parameters have been detected, performance will be evaluated #> using the resamples with no tuning. Did you want to [tune()] parameters? #>   |                                                                              |===================================                                   |  50% #> Warning: No tuning parameters have been detected, performance will be evaluated #> using the resamples with no tuning. Did you want to [tune()] parameters? #>   |                                                                              |====================================================                  |  75% #> Warning: No tuning parameters have been detected, performance will be evaluated #> using the resamples with no tuning. Did you want to [tune()] parameters? #>   |                                                                              |======================================================================| 100% #> Warning: No tuning parameters have been detected, performance will be evaluated #> using the resamples with no tuning. Did you want to [tune()] parameters?"},{"path":"https://github.com/nfj1380/mrIML/articles/Graphical network model (GNM).html","id":"comparing-performance","dir":"Articles","previous_headings":"","what":"Comparing performance","title":"Graphical network model (GNM)","text":"’s important compare advantages using random forest approach. Interpreation easier overall logistic regression gave similar predictive performance.   just look overall AUC values, looks like model performance quite similar (0.86 rf 0.81 lm). However, look Mathew’s correlation coefficient (MCC) taxa lm model see H.killangoi Plas (Plasmodium) values much lower (e.g. 0.02, basically just guess) compared 0.31 rf). Remember classes imbalanced AUC tends inflated measure. evidence non-linear relationships can make difference prediction overall. interrogate rf model . now ask including putative associations taxa improves model performance overall relationship parasites host relative abundance enough. can see overall including associations improved model performance overall particularly predicting H.killangoi Microfilaria. Using MCC compare models problematic association free model defined taxa (NA, probably false negatives low prevalence taxa association-free model). Positive predictive value (PPV) useful case shows without associations can’t predict occurrence taxa (PPV=0 ). Including associations increases PPV ~0.2 - great 80% positive predictions taxa false.","code":"ModelPerf_rf <- mrIMLperformance(yhats_rf,                                  Model=model_rf,                                  Y=Y,                                  mode='classification')  ModelPerf_rf[[1]] #across all parasites #>       response  model_name           roc_AUC               mcc #> 1   Hkillangoi rand_forest 0.886292016806723 0.365745522166111 #> 2  Hzosteropis rand_forest 0.941444372153546 0.718241208825566 #> 3 Microfilaria rand_forest 0.928861788617886 0.437856895997608 #> 4         Plas rand_forest 0.864678899082569 0.496552216869595 #>         sensitivity               ppv       specificity         prevalence #> 1 0.983193277310924              0.25 0.906976744186047  0.115812917594655 #> 2 0.933962264150943 0.793103448275862 0.942857142857143  0.265033407572383 #> 3 0.983739837398374 0.333333333333333 0.937984496124031 0.0979955456570156 #> 4 0.926605504587156 0.538461538461538 0.893805309734513  0.195991091314031 ModelPerf_rf[[2]] #overall #> [1] 0.504599  ModelPerf_lm <- mrIMLperformance(yhats_lm,                                  Model=model_lm,                                  Y=Y, mode='classification')  ModelPerf_lm[[1]] #>       response   model_name           roc_AUC               mcc #> 1   Hkillangoi logistic_reg 0.803326474622771              <NA> #> 2  Hzosteropis logistic_reg 0.815781274341798   0.4040224605406 #> 3 Microfilaria logistic_reg  0.91820987654321 0.433340830644394 #> 4         Plas logistic_reg 0.777072192513369 0.240820814553862 #>         sensitivity               ppv       specificity         prevalence #> 1                 1                 0               0.9  0.115812917594655 #> 2 0.946564885496183  0.36734693877551               0.8  0.265033407572383 #> 3 0.981481481481482 0.333333333333333 0.929824561403509 0.0979955456570156 #> 4 0.963235294117647 0.181818181818182 0.784431137724551  0.195991091314031 ModelPerf_lm[[2]] #> [1] 0.269546  plots <- mrPerformancePlot(ModelPerf1=ModelPerf_lm,                            ModelPerf2=ModelPerf_rf,                            mod_names=c('linear_reg','rand_forest'),                            mode='classification' )  plots #> [[1]] #>  #> [[2]] #>  #> [[3]] #> # A tibble: 4 × 5 #>   response     outlier logistic_reg rand_forest diff_mod1_2 #>   <chr>        <lgl>          <dbl>       <dbl>       <dbl> #> 1 Hkillangoi   NA             0           0.366     0.366   #> 2 Hzosteropis  NA             0.404       0.718     0.314   #> 3 Microfilaria NA             0.433       0.438     0.00452 #> 4 Plas         NA             0.241       0.497     0.256 yhats_rf_noAssoc <- mrIMLpredicts(X=X,                                   Y=Y,                                   X1=NULL, #no associations for this one                                   Model=model_rf,                                   balance_data='no',                                   mode='classification',                                   seed = sample.int(1e8, 1),                                   prop=0.7,                                   k=5,                                   racing=T) #>   |                                                                              |                                                                      |   0%  |                                                                              |==================                                                    |  25%  |                                                                              |===================================                                   |  50%  |                                                                              |====================================================                  |  75%  |                                                                              |======================================================================| 100%  ModelPerf_rf_noAssoc <- mrIMLperformance(yhats_rf_noAssoc,                                          Model=model_rf,                                          Y=Y,                                          mode='classification')  ModelPerf_rf_noAssoc[[1]] #>       response  model_name           roc_AUC               mcc #> 1   Hkillangoi rand_forest  0.61633428300095              <NA> #> 2  Hzosteropis rand_forest 0.787623248572911 0.494420277562475 #> 3 Microfilaria rand_forest 0.715175953079179 0.371709945158283 #> 4         Plas rand_forest  0.78360768175583 0.460220713518774 #>         sensitivity               ppv       specificity         prevalence #> 1                 1                 0 0.866666666666667  0.115812917594655 #> 2 0.936170212765957  0.48780487804878 0.807339449541284  0.265033407572383 #> 3 0.983870967741935 0.272727272727273 0.938461538461538 0.0979955456570156 #> 4 0.898148148148148 0.555555555555556 0.889908256880734  0.195991091314031 ModelPerf_rf[[1]] #performance including associations #>       response  model_name           roc_AUC               mcc #> 1   Hkillangoi rand_forest 0.886292016806723 0.365745522166111 #> 2  Hzosteropis rand_forest 0.941444372153546 0.718241208825566 #> 3 Microfilaria rand_forest 0.928861788617886 0.437856895997608 #> 4         Plas rand_forest 0.864678899082569 0.496552216869595 #>         sensitivity               ppv       specificity         prevalence #> 1 0.983193277310924              0.25 0.906976744186047  0.115812917594655 #> 2 0.933962264150943 0.793103448275862 0.942857142857143  0.265033407572383 #> 3 0.983739837398374 0.333333333333333 0.937984496124031 0.0979955456570156 #> 4 0.926605504587156 0.538461538461538 0.893805309734513  0.195991091314031"},{"path":"https://github.com/nfj1380/mrIML/articles/Graphical network model (GNM).html","id":"downsampling","dir":"Articles","previous_headings":"","what":"Downsampling","title":"Graphical network model (GNM)","text":"Including associations makes difference, can better predicting two rarer taxa? sampling possible case ’ll try sampling see correcting class imbalance improves model fit. Look PPV values now - much better. false positive rate ~ < 15% overall. Now happy performance model, now can interrogate .","code":"yhats_rf_downSamp <- mrIMLpredicts(X=X,                                    Y=Y,                                    X1=X1,                                    Model=model_rf,                                    balance_data='down', #down sampling                                    mode='classification',                                    seed = sample.int(1e8, 1),                                    prop=0.75,                                    k=5,                                    racing=T) #>   |                                                                              |                                                                      |   0%  |                                                                              |==================                                                    |  25%  |                                                                              |===================================                                   |  50%  |                                                                              |====================================================                  |  75%  |                                                                              |======================================================================| 100%  ModelPerf_rf_downSamp <- mrIMLperformance(yhats_rf_downSamp,                                           Model=model_rf,                                           Y=Y,                                           mode='classification')  ModelPerf_rf_downSamp[[1]] #>       response  model_name           roc_AUC               mcc #> 1   Hkillangoi rand_forest 0.893041237113402 0.489868155711274 #> 2  Hzosteropis rand_forest 0.915567765567766 0.645516132718224 #> 3 Microfilaria rand_forest  0.96504854368932 0.474958292677348 #> 4         Plas rand_forest  0.83719806763285 0.400395061824689 #>         sensitivity               ppv       specificity         prevalence #> 1 0.814432989690722            0.8125 0.963414634146341  0.115812917594655 #> 2 0.897435897435897 0.742857142857143 0.886075949367089  0.265033407572383 #> 3 0.766990291262136                 1                 1 0.0979955456570156 #> 4               0.8 0.652173913043478               0.9  0.195991091314031"},{"path":"https://github.com/nfj1380/mrIML/articles/Graphical network model (GNM).html","id":"interpreting-the-model","dir":"Articles","previous_headings":"","what":"Interpreting the model","title":"Graphical network model (GNM)","text":"many cases, like data set, community microbiome data tend small size. apply stochastic machine learning algorithms data, can lead challenges. instance, importance variables may vary substantially create multiple models using data algorithm. handle variability better understand prediction uncertainty, MrIML 2.0 functionality capture uncertainty tuned model using bootstraps. Additionally, approach helps us estimate variables affect response, estimates align results obtained traditional linear regression models (see Cook et al., 2021). MrIML2.0 makes easy get bootstrap estimates variety interpretable machine learning tools, uses estimates construct marginalized co-occurrence networks. First, lets bootstrapping calculate variable importance.  can see host abundance important predictor parasite community (followed H.zosteropsis) . However, second figure shows important variability. example, H.zosteropsis important predictor occurence Microfilaria, host abundance (shortened sc..) less important.","code":"cl <- parallel::makeCluster(5) #can increase the number of cores as needed. plan(cluster, workers=cl)  #do bootstraps. bs_malaria <- mrBootstrap(yhats=yhats_rf,                           Y=Y,                            num_bootstrap = 10,                           downsample = TRUE,                           mode='classification')  #>   |                                                                              |                                                                      |   0%  |                                                                              |==================                                                    |  25%  |                                                                              |===================================                                   |  50%  |                                                                              |====================================================                  |  75%  |                                                                              |======================================================================| 100% #make sure downsample=TRUE as this did improve performance #just 10 bootstraps to keep this short. We suggest using more for a final analysis (100 is reasonable but depends on how big the data is)  #up to here -not working properly bs_impVI <- mrvip(   mrBootstrap_obj = bs_malaria,   yhats = yhats_rf_downSamp,   X = X,   X1 = X1,   Y = Y,   mode = 'classification',   threshold = 0.0,   global_top_var = 10,   local_top_var = 5,   taxa = NULL,   ModelPerf = ModelPerf_rf_downSamp) #> [1] \"here\"  bs_impVI[[3]]  #importance plot. There are plenty of other insights possible #the 'global_top_var' provides a limit to how many predictors are included in the community-wide plot. 'local_top_var provides a limit to the number of individual taxa plots. The threshold excludes plotting individual importance plots for taxa not well predicted by the model."},{"path":"https://github.com/nfj1380/mrIML/articles/Graphical network model (GNM).html","id":"bootstrap-partial-dependence-plots","dir":"Articles","previous_headings":"","what":"Bootstrap partial dependence plots","title":"Graphical network model (GNM)","text":"look relationship variable community structure, MrIML 2.0 convenient wrapper plot bootsrapped partial dependencies taxa interest. plots show , example, presence Microfilaria greatly increass probability observing Plasmodium (~0.32 0.58 holding variables mean value). Note marginal relationships (.e. isolating effect just predictor). host abundance high probability detecting Plasmodium descreases non-linearly (threshold around ~0). parasites less effect. want explore effect host abundance overall can use ‘mr_Covar’ function.  Note isn’t bootstrapped now - line represents taxon case. second plot shows community-wide change occurrence probabilities across host abundance. Note occurrence probabilities taxa drop intermediate levels host abundance (0.75-1.25).","code":"pds <- mrPD_bootstrap(mrBootstrap_obj=bs_malaria,                       vi_obj=bs_impVI,                       X,                       Y,                       target='Plas',                       global_top_var=5) covar <- mr_Covar(yhats=yhats_rf_downSamp,                   X=X,                   X1=X1,                   Y=Y,                   var='scale.prop.zos',                   sdthresh =0.01) #sdthrsh just plots taxa responding the most."},{"path":"https://github.com/nfj1380/mrIML/articles/Graphical network model (GNM).html","id":"co-occurrence-network","dir":"Articles","previous_headings":"","what":"Co-occurrence network","title":"Graphical network model (GNM)","text":"can utilise bootstrapped partial dependence estimates (pds) construct co-occurrence network. show object can converted igraph object plotted. directed network edges scaled standard deviation marginal change prediction. Red positive associations (predicted occurrence taxa increases presence ) blue negative (predicted occurrence taxa decreases presence ). ## 1 way, 2 way 3 way interactions Finally, can quantify importance interactions overall well one two-way interaction importance using bootstrap approach.See https://github.com/mayer79/hstats details method.   first plot shows interactions account average 27% (bootstrap interval 23-34%) variation predictions H.killangoi less taxa. second plot shows interactions involving host abundance impacts predictions Plasmodium (H.zosteropis also important). trend similar community-wide. next plot shows interaction Haemoproteus species important 2-way interaction Plasmodium isn’t true community wide host abudance H.zosteropis strongest interaction overall. Taken together, can see interactions taxa mediated host abundance. Finally, can explore specific interactions detail using 2D partial dependence plots. case choose one important 2-way interactions impacting probability detetcting Plasmodium. H.zosteropsis present relative abundance Zosterops species low probability observing Plasmodium high (~>0.7).","code":"assoc_net<- mrCoOccurNet_bootstrap (mrPD_obj=pds,                                     Y=Y)  assoc_net_filtered <-  assoc_net %>%    filter(mean_strength > 0.1) #based on our simulations the following rule of thumb for associations. Any association  < 0.05  for mean strength is included.  #convert to igraph g <- graph_from_data_frame(assoc_net_filtered,                            directed=TRUE,                            vertices=names(Y)) #matching Y data  E(g)$Value <- assoc_net_filtered$mean_strength  E(g)$Color <- ifelse(assoc_net_filtered$direction == \"negative\", \"blue\", \"red\")  # Convert the igraph object to a ggplot object with NMDS layout gg <- ggnetwork(g)  # Plot the graph ggplot(gg, aes(x = x, y = y, xend = xend, yend = yend)) +   geom_edges(aes(color = Color, linewidth = (Value)),               curvature = 0.2,              arrow = arrow(length = unit(5, \"pt\"),                            type = \"closed\")) +    geom_nodes(color = \"gray\", size = degree(g, mode = \"out\")/2)+   scale_color_identity() +   theme_void() +   theme(legend.position = \"none\")  +   geom_nodelabel_repel(aes(label = name),                        box.padding = unit(0.5, \"lines\"),                        data = gg,                        size=2,                        segment.colour = \"black\",                        colour = \"white\", fill = \"grey36\") int_ <- mrInteractions(yhats=yhats_rf,                        X,                        Y,                        num_bootstrap=10,                        feature = 'Plas',                        top.int=10) #10 bootstraps to keep it short. top int focusses on the 10 top interactions (all of them in this case).  int_[[1]] # overall plot int_[[2]] # individual plot for the response of choice int_[[3]] #two way plot fl <- mrFlashlight(yhats=yhats_rf_downSamp,                    X=cbind(X, Y),                    Y=Y,                    response = \"single\",                    index=4,                    mode='classification') #index=4 selects Plasmodium  plot(light_profile2d(fl,c(\"scale.prop.zos\",\"Hzosteropis\")))+   theme_bw()"},{"path":"https://github.com/nfj1380/mrIML/articles/Graphical network model (GNM).html","id":"references","dir":"Articles","previous_headings":"Co-occurrence network","what":"References","title":"Graphical network model (GNM)","text":"Cook et al., 2021: https://doi.org/10.18651/RWP2021-12 Kuhn (2014): https://doi.org/10.48550/arXiv.1405.6974 Fountain-Jones et al(2021): https://doi.org/10.1111/1755-0998.13495","code":""},{"path":"https://github.com/nfj1380/mrIML/articles/Microbiome data curation.html","id":"creating-names","dir":"Articles","previous_headings":"","what":"Creating names","title":"Microbiome data curation","text":"next functions take ASV table data make unique names new column taxa table. Now can start fomatting Y (response data) ready MrIML. includes filtering rare common taxa. Now good go MrIML 2.0 grahical network models can generated!","code":"#make sure names match final_ASV_table <- asv_data final_ASV_table$ASV <- asv_taxa_table$Name_comp1   #add row names final_ASV_table_r <- final_ASV_table %>%    column_to_rownames(var='ASV') #get into right format for MrIML final_ASV_table_df <-as.data.frame(t(final_ASV_table_r ))  #make presence/absence pa_ASV_table <- final_ASV_table_df %>%    mutate_all(~ ifelse(. > 0, 1, .))  #remove rare and common ASVs Y <- filterRareCommon(pa_ASV_table , lower=0.1, higher=0.9) %>%    dplyr::select(sort(names(.))) #0.2  colnames(Y) <- sub(\".*_(.*_.*)$\", \"\\\\1\", colnames(Y))  ## Find duplicated column names duplicated_cols <- duplicated(colnames(Y))  colnames(Y) <- make.names(colnames(Y), unique = TRUE)  #more tidying Y <- Y %>%    rename_all(~make.names(str_remove_all(., \"`\")))  # Shorten the part to the left of the underscore to 4 characters  abbreviate_names <- function(names_vector) {   abbreviated_names <- sapply(strsplit(names_vector, \"_\"), function(parts) {     first_part <- substr(parts[1], 1, 4)     second_part <- parts[2]     return(paste(first_part, second_part, sep = \"_\"))   })   return(abbreviated_names) }  # Use the function to shorten the names( modified_col_names <- abbreviate_names(colnames(Y))  colnames(Y) <- modified_col_names glimpse(Y) #> Rows: 9 #> Columns: 1,427 #> $ Taxo_Taxon.11.1.1            <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Taxo_Taxon.13.1.1            <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Taxo_Taxon.4.1.1             <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ X.Ba_2.1                     <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ X.Ba_4.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Bact_.Barnesiellaceae..1     <dbl> 0, 0, 0, 1, 0, 1, 0, 1, 0 #> $ Bact_.Barnesiellaceae..2     <dbl> 0, 0, 0, 1, 0, 1, 0, 1, 0 #> $ Baci_.Exiguobacteraceae..1   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ X.Mo_10.1                    <dbl> 1, 0, 1, 0, 0, 0, 0, 1, 0 #> $ X.Mo_11.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ X.Mo_13.1                    <dbl> 1, 0, 1, 0, 0, 1, 1, 0, 0 #> $ X.Mo_15.1                    <dbl> 1, 0, 1, 1, 1, 1, 1, 1, 0 #> $ X.Mo_25.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ X.Mo_28.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ X.Mo_29.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ X.Mo_3.1                     <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ X.Mo_31.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ X.Mo_40.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ X.Mo_41.1                    <dbl> 0, 0, 1, 0, 1, 1, 0, 1, 0 #> $ X.Mo_42.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ X.Mo_44.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ X.Mo_45.1                    <dbl> 1, 0, 0, 1, 0, 1, 0, 1, 1 #> $ X.Mo_5.1                     <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 1 #> $ X.Mo_52.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ X.Mo_53.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ X.Mo_56.1                    <dbl> 0, 0, 1, 1, 1, 1, 0, 1, 0 #> $ X.Mo_6.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ X.Mo_8.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ X.Mo_9.1                     <dbl> 1, 0, 0, 0, 0, 0, 1, 1, 0 #> $ Clos_.Mogibacteriaceae..1    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ X.Od_2.1                     <dbl> 1, 0, 0, 1, 1, 1, 1, 0, 0 #> $ X.Od_3.1                     <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 1 #> $ X.Od_4.1                     <dbl> 0, 0, 0, 1, 0, 0, 1, 0, 0 #> $ X.Od_5.1                     <dbl> 0, 0, 0, 1, 0, 0, 1, 0, 0 #> $ Bact_.Odoribacteraceae..1    <dbl> 0, 0, 1, 1, 1, 0, 0, 0, 0 #> $ Bact_.Odoribacteraceae..2    <dbl> 0, 0, 0, 1, 1, 0, 0, 0, 0 #> $ X.Od_2.1.1                   <dbl> 0, 0, 1, 1, 0, 1, 1, 1, 1 #> $ X.Od_3.1.1                   <dbl> 0, 0, 1, 1, 1, 1, 1, 1, 1 #> $ Bact_.Odoribacteraceae..1.1  <dbl> 0, 0, 1, 1, 0, 0, 1, 1, 0 #> $ X.Ti_2.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ X.Ti_3.1                     <dbl> 1, 0, 0, 1, 1, 0, 0, 1, 0 #> $ X.Ti_5.1                     <dbl> 1, 0, 0, 1, 1, 0, 0, 1, 0 #> $ Acho_3.1.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Acho_4.1.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Acho_5.1.1                   <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 0 #> $ Acho_Acholeplasmatales.1.1   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Acho_Acholeplasmatales.2.1   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Alca_2.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Burk_Alcaligenaceae.2        <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Anae_10.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Anae_11.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Anae_2.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Anae_4.1                     <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Anae_5.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Anae_6.1                     <dbl> 1, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Anae_7.1                     <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Anae_Anaeroplasmataceae.1    <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Baci_3.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Bact_10.1                    <dbl> 0, 0, 0, 1, 1, 1, 0, 1, 0 #> $ Bact_11.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Bact_12.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Bact_13.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Bact_14.1                    <dbl> 1, 0, 1, 1, 1, 1, 0, 1, 0 #> $ Bact_15.1                    <dbl> 1, 0, 0, 1, 1, 0, 0, 1, 0 #> $ Bact_16.1                    <dbl> 1, 0, 1, 1, 1, 1, 1, 1, 0 #> $ Bact_17.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Bact_2.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Bact_20.1                    <dbl> 1, 0, 1, 1, 1, 1, 0, 1, 0 #> $ Bact_21.1                    <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 0 #> $ Bact_22.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Bact_23.1                    <dbl> 0, 0, 0, 1, 0, 1, 0, 1, 0 #> $ Bact_24.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Bact_25.1                    <dbl> 0, 0, 0, 0, 1, 1, 0, 1, 0 #> $ Bact_26.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Bact_27.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Bact_28.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Bact_29.1                    <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 0 #> $ Bact_30.1                    <dbl> 1, 0, 0, 0, 0, 1, 1, 0, 1 #> $ Bact_31.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 1 #> $ Bact_34.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Bact_35.1                    <dbl> 0, 0, 1, 1, 1, 1, 0, 0, 0 #> $ Bact_38.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Bact_39.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Bact_41.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Bact_8.1                     <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Bact_9.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Bact_Bacteroidaceae.1        <dbl> 0, 0, 1, 1, 1, 1, 1, 1, 0 #> $ Bact_Bacteroidaceae.2        <dbl> 1, 0, 1, 1, 0, 0, 0, 1, 0 #> $ Bact_2.1.1                   <dbl> 0, 0, 1, 0, 1, 1, 0, 1, 0 #> $ Bact_Bacteroidaceae.2.1      <dbl> 1, 0, 1, 1, 1, 1, 1, 1, 0 #> $ Bact_Bacteroidaceae.1.1      <dbl> 1, 0, 1, 1, 1, 1, 1, 1, 0 #> $ Bact_Bacteroidaceae.1.2      <dbl> 0, 0, 0, 1, 0, 1, 0, 1, 0 #> $ Bact_2.1.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Bifi_2.1                     <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Bifi_Bifidobacteriaceae.1    <dbl> 0, 0, 1, 1, 0, 0, 0, 0, 0 #> $ Bifi_Bifidobacteriaceae.2    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Camp_Campylobacteraceae.2    <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Chri_100.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_103.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_106.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Chri_114.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_115.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_119.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Chri_12.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Chri_120.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Chri_125.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_128.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Chri_130.1                   <dbl> 1, 1, 0, 0, 0, 0, 1, 0, 0 #> $ Chri_133.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_135.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Chri_141.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_18.1                    <dbl> 0, 0, 1, 0, 0, 0, 1, 1, 1 #> $ Chri_20.1                    <dbl> 1, 0, 1, 1, 1, 0, 0, 0, 0 #> $ Chri_21.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Chri_25.1                    <dbl> 0, 0, 1, 1, 1, 0, 1, 0, 0 #> $ Chri_28.1                    <dbl> 1, 0, 0, 0, 1, 0, 1, 0, 1 #> $ Chri_31.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_34.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_36.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Chri_37.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Chri_4.1                     <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Chri_40.1                    <dbl> 0, 0, 1, 1, 0, 0, 0, 1, 0 #> $ Chri_42.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Chri_45.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Chri_53.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Chri_65.1                    <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 1 #> $ Chri_71.1                    <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Chri_86.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Chri_9.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Chri_92.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Chri_98.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_Christensenellaceae.1   <dbl> 1, 0, 1, 1, 0, 0, 0, 1, 0 #> $ Clos_Christensenellaceae.2   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_Clostridiaceae.2        <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 1 #> $ Clos_15.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_21.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_22.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_31.1                    <dbl> 0, 0, 0, 1, 0, 1, 0, 1, 0 #> $ Clos_33.1                    <dbl> 1, 0, 0, 0, 1, 1, 0, 1, 1 #> $ Clos_35.1                    <dbl> 1, 0, 1, 0, 1, 1, 0, 1, 1 #> $ Clos_37.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 1 #> $ Clos_41.1                    <dbl> 0, 0, 1, 1, 0, 0, 0, 0, 1 #> $ Clos_42.1                    <dbl> 0, 0, 1, 1, 1, 1, 0, 1, 0 #> $ Clos_43.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_44.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_48.1                    <dbl> 0, 0, 1, 0, 1, 1, 0, 0, 0 #> $ Clos_49.1                    <dbl> 1, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Clos_50.1                    <dbl> 1, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Clos_51.1                    <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_52.1                    <dbl> 0, 0, 1, 0, 1, 1, 0, 1, 0 #> $ Clos_53.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_56.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 1 #> $ Clos_58.1                    <dbl> 1, 0, 1, 1, 1, 0, 0, 1, 1 #> $ Clos_70.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Clos_72.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_73.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_10.1                    <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 0 #> $ Clos_16.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_22.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 1 #> $ Clos_23.1                    <dbl> 1, 0, 1, 0, 1, 0, 0, 1, 0 #> $ Clos_24.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_26.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Clos_32.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_37.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_41.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Clos_42.1.1                  <dbl> 1, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Clos_44.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 0 #> $ Clos_46.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Clos_49.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_5.1                     <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_56.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_57.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_58.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_62.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_63.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_Clostridiaceae.1        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_2.1                     <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_3.1                     <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_Clostridiaceae.1.1      <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_Clostridiaceae.2.1      <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_101.1.1                 <dbl> 0, 0, 1, 0, 1, 1, 0, 0, 0 #> $ Clos_104.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_105.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_108.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_109.1.1                 <dbl> 1, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_110.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_111.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_118.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_119.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_12.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_120.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_122.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_124.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_126.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_127.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_128.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_129.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_132.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Clos_14.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Clos_141.1.1                 <dbl> 1, 0, 1, 1, 0, 0, 0, 0, 0 #> $ Clos_150.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_151.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_152.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 1, 0, 0 #> $ Clos_155.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_156.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_157.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_158.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_159.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_162.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_164.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_173.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_176.1.1                 <dbl> 1, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_181.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_182.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Clos_188.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_190.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_195.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_197.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_198.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_199.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_2.1.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_200.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_205.1.1                 <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_207.1.1                 <dbl> 1, 0, 1, 0, 0, 1, 1, 0, 0 #> $ Clos_208.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_209.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_210.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_213.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_215.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_22.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_225.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_227.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_228.1.1                 <dbl> 1, 1, 1, 0, 0, 1, 0, 1, 0 #> $ Clos_230.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 1, 0, 0 #> $ Clos_232.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_233.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_241.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_243.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_249.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_254.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 1, 1, 0 #> $ Clos_256.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_265.1.1                 <dbl> 1, 0, 0, 1, 1, 1, 1, 1, 0 #> $ Clos_267.1.1                 <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Clos_268.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_271.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_276.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_277.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_278.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_279.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Clos_285.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_286.1.1                 <dbl> 0, 0, 1, 1, 0, 1, 0, 0, 0 #> $ Clos_288.1.1                 <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 0 #> $ Clos_290.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_292.1.1                 <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Clos_293.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_297.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_30.1.1                  <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_300.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_302.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_308.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_309.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_31.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_311.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_312.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_313.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_315.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_321.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_328.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Clos_33.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_331.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_333.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_337.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_339.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_342.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_349.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_350.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_352.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 0 #> $ Clos_353.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_356.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_359.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 0 #> $ Clos_361.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_362.1.1                 <dbl> 1, 0, 1, 1, 0, 0, 0, 0, 0 #> $ Clos_365.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_367.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Clos_38.1.1                  <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Clos_384.1.1                 <dbl> 1, 0, 1, 0, 1, 1, 1, 1, 0 #> $ Clos_386.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_387.1.1                 <dbl> 0, 0, 0, 0, 1, 1, 0, 0, 0 #> $ Clos_388.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_389.1.1                 <dbl> 0, 0, 0, 0, 1, 1, 0, 0, 0 #> $ Clos_39.1.1                  <dbl> 0, 1, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_391.1.1                 <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Clos_392.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_394.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_395.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_396.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Clos_397.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_398.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_399.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_401.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_402.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_406.1.1                 <dbl> 0, 0, 1, 0, 1, 1, 0, 1, 0 #> $ Clos_407.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_408.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Clos_410.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_412.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Clos_414.1.1                 <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_415.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_420.1.1                 <dbl> 0, 0, 1, 0, 1, 0, 0, 1, 0 #> $ Clos_422.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_427.1.1                 <dbl> 1, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_44.1.1                  <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 0 #> $ Clos_440.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Clos_441.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_444.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_447.1.1                 <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_449.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_45.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_454.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_455.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_456.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_465.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_466.1.1                 <dbl> 0, 0, 1, 1, 0, 1, 0, 0, 0 #> $ Clos_476.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_477.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_478.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_48.1.1                  <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_482.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_483.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_485.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_487.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_49.1.1                  <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Clos_491.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_495.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_499.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_50.1.1                  <dbl> 0, 0, 0, 1, 1, 0, 1, 0, 0 #> $ Clos_502.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_503.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_510.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_514.1.1                 <dbl> 1, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Clos_515.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_517.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_523.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_524.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_525.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_527.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_528.1.1                 <dbl> 1, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_535.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_538.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Clos_543.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Clos_544.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_545.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_547.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_549.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_550.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 1, 0, 0 #> $ Clos_551.1.1                 <dbl> 0, 0, 0, 1, 1, 1, 1, 1, 0 #> $ Clos_56.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_564.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_565.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_572.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_574.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_575.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_576.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_579.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_58.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_580.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_581.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_584.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_585.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_588.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_59.1.1                  <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_590.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_593.1.1                 <dbl> 0, 0, 1, 1, 0, 1, 0, 0, 0 #> $ Clos_595.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_599.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_60.1.1                  <dbl> 1, 0, 1, 0, 0, 0, 1, 0, 0 #> $ Clos_600.1.1                 <dbl> 1, 0, 0, 0, 0, 1, 1, 0, 0 #> $ Clos_603.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 1 #> $ Clos_609.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_61.1.1                  <dbl> 0, 0, 0, 1, 1, 0, 1, 0, 0 #> $ Clos_610.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_611.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_619.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_620.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_621.1.1                 <dbl> 0, 0, 1, 0, 1, 0, 0, 1, 0 #> $ Clos_625.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_626.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_627.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_629.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_634.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_638.1.1                 <dbl> 1, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Clos_644.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_648.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_651.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_654.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_657.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_659.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_663.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_664.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 1 #> $ Clos_674.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_675.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_676.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_677.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_681.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_685.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_691.1.1                 <dbl> 1, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_692.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_693.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_696.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_698.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_7.1.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_70.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_700.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_703.1.1                 <dbl> 1, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Clos_707.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_709.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_71.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_711.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_716.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_717.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_719.1.1                 <dbl> 1, 0, 1, 0, 1, 0, 1, 0, 0 #> $ Clos_720.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_721.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_726.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_730.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_734.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_736.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Clos_737.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_745.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_748.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_760.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_761.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_763.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_766.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_767.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_77.1.1                  <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_770.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_771.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_783.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_785.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Clos_79.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_790.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_791.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_794.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_795.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_797.1.1                 <dbl> 1, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_798.1.1                 <dbl> 1, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_80.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Clos_806.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_815.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_818.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_825.1.1                 <dbl> 0, 1, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_826.1.1                 <dbl> 0, 0, 0, 0, 1, 1, 1, 0, 0 #> $ Clos_828.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_832.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Clos_834.1.1                 <dbl> 1, 0, 1, 1, 0, 0, 0, 0, 0 #> $ Clos_835.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_838.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Clos_84.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_841.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Clos_846.1.1                 <dbl> 0, 0, 1, 1, 1, 1, 1, 1, 0 #> $ Clos_848.1.1                 <dbl> 1, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Clos_849.1.1                 <dbl> 0, 0, 1, 1, 0, 0, 0, 0, 0 #> $ Clos_852.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Clos_853.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_854.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_855.1.1                 <dbl> 1, 0, 1, 1, 0, 1, 1, 1, 0 #> $ Clos_856.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_859.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_863.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_865.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Clos_866.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Clos_870.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Clos_872.1.1                 <dbl> 0, 0, 1, 0, 1, 0, 0, 1, 0 #> $ Clos_873.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_875.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_879.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_882.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_883.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_885.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_98.1.1                  <dbl> 0, 0, 0, 1, 1, 0, 0, 0, 0 #> $ Clos_Clostridiales.1.1       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_Clostridiales.2.1       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Coma_4.1                     <dbl> 0, 1, 0, 0, 0, 0, 0, 0, 0 #> $ Burk_Comamonadaceae.2        <dbl> 0, 1, 0, 0, 0, 0, 0, 0, 0 #> $ Cori_10.1                    <dbl> 0, 1, 1, 0, 0, 0, 1, 0, 0 #> $ Cori_3.1                     <dbl> 0, 0, 1, 1, 1, 0, 0, 0, 0 #> $ Cori_4.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Cori_5.1                     <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Cori_7.1                     <dbl> 0, 0, 1, 1, 1, 0, 0, 1, 0 #> $ Cori_3.1.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Cori_5.1.1                   <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Cori_6.1                     <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Cori_9.1                     <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Cori_2.1                     <dbl> 1, 0, 1, 1, 1, 0, 1, 1, 1 #> $ Cori_3.1.2                   <dbl> 0, 0, 1, 1, 1, 0, 1, 1, 0 #> $ Defe_Deferribacteraceae.2    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Deha_2.1                     <dbl> 1, 0, 0, 0, 1, 0, 1, 0, 0 #> $ Deha_6.1                     <dbl> 1, 0, 1, 1, 1, 0, 0, 1, 0 #> $ Deha_7.1                     <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Clos_Dehalobacteriaceae.2    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Deha_10.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Deha_16.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Deha_19.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Deha_22.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Deha_26.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Deha_35.1                    <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Deha_37.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Deha_38.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Deha_42.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 1, 0 #> $ Deha_45.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Deha_7.1.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Deha_8.1                     <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Deha_9.1                     <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_Dehalobacteriaceae.1    <dbl> 0, 0, 0, 1, 1, 0, 0, 0, 0 #> $ Clos_Dehalobacteriaceae.2.1  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Acti_Dermabacteraceae.1      <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Desu_Desulfovibrionaceae.1   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 1 #> $ Desu_Desulfovibrionaceae.2   <dbl> 1, 0, 0, 1, 1, 1, 1, 0, 1 #> $ Desu_Desulfovibrionaceae.1.1 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Ente_24.1                    <dbl> 1, 0, 0, 1, 1, 1, 1, 1, 1 #> $ Ente_3.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lact_Enterococcaceae.1       <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lact_Enterococcaceae.2       <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lact_Enterococcaceae.2.1     <dbl> 0, 0, 1, 1, 1, 0, 0, 0, 1 #> $ Erys_Erysipelotrichaceae.1   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Erys_Erysipelotrichaceae.1.1 <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Erys_11.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Erys_15.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Erys_18.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Erys_2.1                     <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Erys_11.1.1                  <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Erys_13.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Erys_14.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Erys_18.1.1                  <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 0 #> $ Erys_21.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Erys_22.1                    <dbl> 1, 0, 1, 0, 1, 1, 1, 0, 0 #> $ Erys_23.1                    <dbl> 1, 0, 0, 0, 1, 1, 1, 0, 0 #> $ Erys_28.1                    <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 1 #> $ Erys_29.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Erys_30.1                    <dbl> 0, 0, 1, 0, 1, 0, 1, 0, 0 #> $ Erys_33.1                    <dbl> 0, 0, 0, 1, 0, 0, 1, 0, 1 #> $ Erys_34.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Erys_37.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Erys_38.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Erys_39.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Erys_40.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Erys_43.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Erys_49.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Erys_5.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Erys_51.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Erys_52.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Erys_53.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Erys_54.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Erys_6.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Erys_7.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Erys_Erysipelotrichaceae.1.2 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Erys_2.1.1                   <dbl> 0, 0, 0, 1, 0, 0, 1, 0, 1 #> $ Erys_2.1.2                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Erys_Erysipelotrichaceae.1.3 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Euba_5.1                     <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Flav_3.1                     <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ JG30_JG30.KF.CM45.2.1        <dbl> 0, 1, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_12.1                    <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_14.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_15.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_16.1                    <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Lach_3.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_Lachnospiraceae.1       <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_Lachnospiraceae.2       <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_2.1                     <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_Lachnospiraceae.1.1     <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_Lachnospiraceae.2.1     <dbl> 0, 0, 0, 0, 1, 0, 1, 1, 0 #> $ Lach_5.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Lach_10.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_11.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_13.1                    <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 0 #> $ Lach_2.1.1                   <dbl> 1, 0, 1, 0, 1, 1, 0, 0, 0 #> $ Lach_3.1.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Lach_6.1                     <dbl> 1, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Clos_Lachnospiraceae.2.2     <dbl> 1, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Lach_2.1.2                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Clos_Lachnospiraceae.1.2     <dbl> 1, 0, 1, 1, 1, 0, 0, 1, 0 #> $ Lach_104.1                   <dbl> 0, 0, 0, 1, 1, 0, 0, 0, 0 #> $ Lach_105.1                   <dbl> 0, 0, 1, 1, 0, 1, 0, 0, 0 #> $ Lach_110.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Lach_12.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_122.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Lach_124.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Lach_125.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_126.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_127.1                   <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Lach_128.1                   <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Lach_134.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_136.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Lach_14.1.1                  <dbl> 0, 1, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_140.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_141.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Lach_142.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_144.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_151.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_154.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_156.1                   <dbl> 1, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Lach_157.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_158.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_159.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_161.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Lach_162.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_164.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_165.1                   <dbl> 1, 0, 0, 0, 0, 1, 1, 1, 0 #> $ Lach_166.1                   <dbl> 0, 0, 0, 1, 1, 0, 0, 0, 0 #> $ Lach_167.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Lach_169.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Lach_177.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_180.1                   <dbl> 0, 0, 1, 1, 1, 1, 0, 1, 0 #> $ Lach_182.1                   <dbl> 1, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Lach_184.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Lach_185.1                   <dbl> 0, 0, 1, 1, 1, 1, 0, 1, 0 #> $ Lach_187.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_188.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_189.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_190.1                   <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 1 #> $ Lach_198.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_199.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_20.1                    <dbl> 1, 0, 0, 1, 0, 1, 0, 0, 0 #> $ Lach_200.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 1 #> $ Lach_202.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Lach_203.1                   <dbl> 0, 0, 0, 1, 1, 1, 0, 1, 0 #> $ Lach_204.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Lach_206.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_210.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_211.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_214.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Lach_218.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Lach_22.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_220.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_221.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_222.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_224.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_227.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Lach_23.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_237.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_239.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Lach_248.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Lach_25.1                    <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 1 #> $ Lach_26.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Lach_35.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_37.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_40.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_41.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Lach_43.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_44.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_45.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_46.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Lach_49.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Lach_53.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_54.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_55.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Lach_57.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_59.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Lach_61.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Lach_64.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_67.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_68.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_71.1                    <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 0 #> $ Lach_74.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_8.1                     <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 1 #> $ Lach_89.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_90.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Lach_91.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_94.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_95.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Clos_Lachnospiraceae.2.3     <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_16.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_18.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_22.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Lach_25.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_26.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_30.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Lach_35.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Lach_40.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Lach_41.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Lach_44.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_45.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Lach_48.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_53.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Lach_55.1.1                  <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Lach_56.1                    <dbl> 1, 0, 1, 1, 0, 0, 0, 1, 0 #> $ Lach_58.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_59.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Lach_61.1.1                  <dbl> 1, 0, 1, 1, 1, 1, 1, 1, 0 #> $ Lach_64.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_66.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Lach_67.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lach_68.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_69.1                    <dbl> 1, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Lach_73.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 1 #> $ Clos_Lachnospiraceae.1.3     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_11.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Lach_13.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_14.1.2                  <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Lach_15.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Lach_18.1.1                  <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Lach_19.1                    <dbl> 1, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Lach_4.1                     <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 1 #> $ Lach_5.1.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lach_6.1.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_8.1.1                   <dbl> 1, 0, 1, 1, 1, 1, 1, 1, 0 #> $ Lach_21.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_22.1.2                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Lach_4.1.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Lach_7.1                     <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_Lachnospiraceae.1.4     <dbl> 1, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Clos_Lachnospiraceae.2.4     <dbl> 1, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Lach_3.1.2                   <dbl> 0, 0, 0, 0, 0, 0, 1, 1, 0 #> $ Lach_5.1.2                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Clos_Lachnospiraceae.1.5     <dbl> 0, 0, 1, 1, 0, 0, 0, 0, 0 #> $ Clos_Lachnospiraceae.2.5     <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Lact_12.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Lact_2.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Lact_3.1                     <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Lact_4.1                     <dbl> 0, 0, 1, 1, 0, 1, 0, 0, 0 #> $ Lact_5.1                     <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Lact_7.1                     <dbl> 0, 0, 1, 0, 0, 0, 1, 0, 1 #> $ Meth_Methanobacteriaceae.1   <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0 #> $ Rhiz_Methylobacteriaceae.1   <dbl> 0, 1, 0, 0, 0, 0, 0, 0, 0 #> $ Acti_Microbacteriaceae.1     <dbl> 0, 1, 0, 0, 0, 0, 0, 0, 0 #> $ Micr_2.1                     <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Acti_Micrococcaceae.2        <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Acti_Micrococcaceae.1        <dbl> 0, 1, 0, 0, 0, 0, 0, 0, 0 #> $ ML61_10.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ ML61_12.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ ML61_2.1.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ ML61_9.1.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Burk_Oxalobacteraceae.1      <dbl> 1, 0, 1, 1, 0, 0, 0, 0, 0 #> $ Pept_3.1                     <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Pept_2.1                     <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Pept_6.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Pept_2.1                     <dbl> 0, 0, 0, 1, 1, 0, 0, 1, 0 #> $ Pept_4.1                     <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Pept_6.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_Peptostreptococcaceae.1 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Pire_3.1                     <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Bact_Porphyromonadaceae.1    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Porp_2.1                     <dbl> 0, 0, 0, 1, 1, 1, 0, 0, 0 #> $ Bact_Porphyromonadaceae.2    <dbl> 0, 0, 0, 1, 1, 1, 1, 1, 0 #> $ Porp_2.1.1                   <dbl> 0, 0, 0, 1, 1, 1, 0, 1, 0 #> $ Porp_4.1                     <dbl> 0, 0, 0, 1, 1, 0, 0, 0, 0 #> $ Bact_Porphyromonadaceae.1.1  <dbl> 0, 0, 1, 1, 1, 1, 0, 1, 0 #> $ Bact_Porphyromonadaceae.2.1  <dbl> 0, 0, 0, 1, 1, 1, 0, 1, 0 #> $ RF32_12.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF32_2.1.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF32_5.1.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF32_RF32.2.1                <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_101.1.1                 <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ RF39_105.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_11.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_115.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ RF39_117.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ RF39_120.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_121.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_123.1.1                 <dbl> 1, 1, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_127.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ RF39_128.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_135.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_137.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_138.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_143.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_147.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_148.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ RF39_15.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_150.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_152.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_164.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_166.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ RF39_169.1.1                 <dbl> 0, 1, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_170.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_171.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_172.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_180.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_182.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_187.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_189.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ RF39_190.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_191.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_193.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_195.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ RF39_196.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ RF39_198.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_205.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_207.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_212.1.1                 <dbl> 1, 0, 1, 0, 0, 1, 1, 0, 0 #> $ RF39_213.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ RF39_214.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_221.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_222.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_224.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_226.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ RF39_228.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ RF39_229.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_23.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_230.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_246.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_27.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_29.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_30.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 1, 0, 0 #> $ RF39_31.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_33.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_35.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ RF39_38.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ RF39_43.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_44.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ RF39_46.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_48.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_49.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_50.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_51.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_54.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_56.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_59.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_61.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_62.1.1                  <dbl> 0, 0, 0, 1, 0, 0, 1, 0, 0 #> $ RF39_63.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_64.1.1                  <dbl> 0, 0, 0, 1, 1, 1, 0, 0, 0 #> $ RF39_65.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_67.1.1                  <dbl> 1, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_7.1.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ RF39_70.1.1                  <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_71.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_75.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_76.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ RF39_77.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_79.1.1                  <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ RF39_8.1.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ RF39_81.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_89.1.1                  <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ RF39_99.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ RF39_RF39.1.1                <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ WCHB_RFP12.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rhod_Rhodobacteraceae.2      <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rike_10.1                    <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Rike_14.1                    <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rike_15.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rike_17.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rike_18.1                    <dbl> 1, 0, 1, 0, 0, 1, 0, 0, 1 #> $ Rike_2.1                     <dbl> 1, 0, 0, 1, 0, 0, 1, 1, 1 #> $ Rike_20.1                    <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rike_3.1                     <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rike_6.1                     <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rike_7.1                     <dbl> 0, 0, 1, 1, 1, 0, 0, 1, 0 #> $ Rike_9.1                     <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Rumi_4.1                     <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_5.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_100.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_1000.1                  <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_1002.1                  <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Rumi_1003.1                  <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_1004.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_101.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_1010.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_1011.1                  <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_1015.1                  <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 1 #> $ Rumi_102.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_1023.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_1027.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_1028.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_1029.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_103.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_1033.1                  <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_1034.1                  <dbl> 1, 0, 1, 0, 0, 0, 1, 0, 1 #> $ Rumi_1035.1                  <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_1036.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_1039.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_1040.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_1041.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_1042.1                  <dbl> 0, 0, 1, 0, 1, 0, 0, 1, 0 #> $ Rumi_1046.1                  <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_1047.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_1054.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_1056.1                  <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 1 #> $ Rumi_1057.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_1060.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_1062.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_1063.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_107.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_108.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_110.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_111.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_112.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_114.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_116.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_122.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_127.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_128.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_131.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_139.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_147.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_148.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_15.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_155.1                   <dbl> 1, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Rumi_156.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_161.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_17.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 1, 0 #> $ Rumi_176.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_18.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_182.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_185.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_186.1                   <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Rumi_189.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_19.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 1 #> $ Rumi_190.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_191.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_196.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_197.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_198.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_2.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_20.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_200.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_201.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_204.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_206.1                   <dbl> 0, 0, 1, 1, 1, 1, 0, 1, 0 #> $ Rumi_213.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_217.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_219.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_223.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_225.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_226.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_227.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Rumi_228.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_23.1                    <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_232.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_235.1                   <dbl> 0, 0, 1, 1, 1, 0, 1, 1, 0 #> $ Rumi_237.1                   <dbl> 0, 0, 0, 1, 0, 0, 1, 1, 1 #> $ Rumi_239.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_245.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_246.1                   <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 0 #> $ Rumi_25.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_251.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_254.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_255.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_26.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_261.1                   <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_262.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_264.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_268.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_269.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_272.1                   <dbl> 1, 0, 1, 0, 0, 0, 1, 0, 0 #> $ Rumi_276.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_277.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_278.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_279.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_286.1                   <dbl> 1, 0, 1, 0, 1, 1, 0, 0, 0 #> $ Rumi_292.1                   <dbl> 0, 0, 1, 0, 1, 0, 0, 1, 0 #> $ Rumi_293.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Rumi_294.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_3.1                     <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_304.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_307.1                   <dbl> 1, 0, 1, 1, 0, 0, 0, 1, 0 #> $ Rumi_309.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_311.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 1, 0 #> $ Rumi_313.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_314.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_317.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_320.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_323.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_328.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_329.1                   <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_330.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_332.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_339.1                   <dbl> 1, 1, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_34.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_343.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_344.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_345.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_348.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_350.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_352.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_356.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_357.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_359.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_361.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_362.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_363.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_372.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_373.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_374.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_375.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_377.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_378.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_38.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_380.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_381.1                   <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Rumi_382.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 1 #> $ Rumi_384.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_385.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_389.1                   <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Rumi_390.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_391.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_393.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_397.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_4.1.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_40.1                    <dbl> 0, 0, 0, 0, 1, 1, 0, 0, 0 #> $ Rumi_400.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_401.1                   <dbl> 1, 0, 1, 1, 1, 0, 1, 0, 0 #> $ Rumi_402.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_403.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_408.1                   <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Rumi_410.1                   <dbl> 0, 0, 1, 1, 0, 0, 0, 1, 0 #> $ Rumi_411.1                   <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Rumi_417.1                   <dbl> 0, 0, 1, 1, 0, 0, 0, 0, 0 #> $ Rumi_420.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_423.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_424.1                   <dbl> 0, 0, 1, 1, 1, 1, 0, 1, 0 #> $ Rumi_426.1                   <dbl> 0, 0, 0, 1, 0, 1, 0, 1, 0 #> $ Rumi_430.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_431.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_433.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_439.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_440.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_441.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_442.1                   <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_443.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_445.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_446.1                   <dbl> 1, 0, 1, 1, 1, 0, 1, 1, 0 #> $ Rumi_45.1                    <dbl> 0, 0, 0, 0, 1, 1, 0, 1, 0 #> $ Rumi_451.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_452.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_454.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_457.1                   <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 0 #> $ Rumi_466.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_47.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_470.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_471.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_477.1                   <dbl> 1, 0, 1, 0, 0, 0, 1, 1, 0 #> $ Rumi_480.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_481.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_482.1                   <dbl> 0, 0, 0, 1, 1, 0, 0, 1, 0 #> $ Rumi_483.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_484.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_485.1                   <dbl> 0, 0, 1, 0, 0, 1, 1, 1, 0 #> $ Rumi_486.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_487.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_488.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_489.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_490.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_492.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_496.1                   <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_5.1.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_50.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_500.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_503.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_504.1                   <dbl> 1, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Rumi_505.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_508.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_514.1                   <dbl> 1, 0, 1, 0, 0, 0, 1, 0, 1 #> $ Rumi_538.1                   <dbl> 1, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_54.1                    <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_545.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_548.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_551.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_552.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_558.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_559.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_56.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_560.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_562.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_567.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_568.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_57.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_574.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_577.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_578.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_579.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_581.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_587.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_589.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_59.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_591.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_592.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_595.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_596.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_598.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_599.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_606.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_608.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_614.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_615.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Rumi_616.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_617.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_619.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_625.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_628.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_63.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_631.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_632.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_638.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_639.1                   <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_642.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_647.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_648.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_65.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_651.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_652.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_654.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 1 #> $ Rumi_657.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_659.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_660.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_666.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_672.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_674.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_676.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_68.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_680.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_682.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 1 #> $ Rumi_684.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_686.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_687.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_69.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_692.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_693.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_695.1                   <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Rumi_70.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_700.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_704.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_708.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 1, 0 #> $ Rumi_71.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_713.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_714.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_717.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_718.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_72.1                    <dbl> 1, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Rumi_720.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_721.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_722.1                   <dbl> 0, 0, 0, 1, 1, 0, 1, 0, 0 #> $ Rumi_725.1                   <dbl> 1, 0, 1, 0, 0, 0, 1, 1, 0 #> $ Rumi_727.1                   <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 0 #> $ Rumi_732.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_74.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_740.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_743.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_747.1                   <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_75.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_757.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_758.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_760.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_761.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_762.1                   <dbl> 0, 0, 1, 1, 0, 0, 0, 1, 0 #> $ Rumi_763.1                   <dbl> 1, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Rumi_766.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_767.1                   <dbl> 1, 0, 0, 0, 1, 1, 0, 1, 0 #> $ Rumi_768.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_77.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_774.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_779.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_78.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_781.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_789.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_79.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_790.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_793.1                   <dbl> 0, 0, 1, 0, 1, 0, 0, 1, 0 #> $ Rumi_799.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_802.1                   <dbl> 0, 0, 1, 1, 0, 0, 0, 0, 0 #> $ Rumi_803.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_804.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_806.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_81.1                    <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 0 #> $ Rumi_812.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_813.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_814.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_815.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_818.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_823.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_824.1                   <dbl> 1, 0, 0, 0, 1, 0, 0, 1, 1 #> $ Rumi_826.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_83.1                    <dbl> 0, 0, 0, 1, 1, 0, 1, 1, 1 #> $ Rumi_830.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_832.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_839.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_84.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_843.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_844.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_845.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_847.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_849.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_86.1                    <dbl> 0, 0, 1, 0, 1, 0, 1, 0, 0 #> $ Rumi_865.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_866.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_867.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_872.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_874.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_875.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_879.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_881.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_89.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_891.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_892.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_898.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_899.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_900.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_904.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_909.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_91.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_910.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_914.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_919.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_921.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_924.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_926.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_928.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_929.1                   <dbl> 0, 0, 0, 0, 1, 1, 0, 1, 0 #> $ Rumi_932.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_934.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_937.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_947.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_948.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_953.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_954.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Rumi_957.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_958.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_961.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_964.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_965.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_966.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_967.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 1, 0 #> $ Rumi_97.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_971.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_972.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Rumi_973.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_974.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_975.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_976.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_980.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_985.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_986.1                   <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_989.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_992.1                   <dbl> 1, 0, 1, 0, 0, 1, 1, 0, 0 #> $ Rumi_996.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ Rumi_999.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Clos_Ruminococcaceae.1       <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Clos_Ruminococcaceae.2       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Clos_Ruminococcaceae.1.1     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_10.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_100.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_103.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_105.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_106.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_111.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_116.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_12.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Rumi_125.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 1 #> $ Rumi_13.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Rumi_141.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_144.1                   <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0 #> $ Rumi_145.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_15.1.1                  <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Rumi_151.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_158.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_16.1                    <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Rumi_161.1.1                 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_162.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_163.1                   <dbl> 1, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Rumi_164.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_165.1                   <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 0 #> $ Rumi_167.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_168.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_17.1.1                  <dbl> 0, 0, 1, 0, 1, 1, 0, 1, 0 #> $ Rumi_170.1                   <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_18.1.1                  <dbl> 0, 0, 0, 0, 1, 1, 0, 0, 0 #> $ Rumi_19.1.1                  <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Rumi_2.1.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_26.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_27.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_3.1.1                   <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Rumi_34.1.1                  <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_35.1                    <dbl> 0, 0, 0, 1, 1, 0, 0, 1, 0 #> $ Rumi_38.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_39.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 1 #> $ Rumi_45.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_46.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_47.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_49.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_5.1.2                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_50.1.1                  <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_54.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_55.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_62.1                    <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 1 #> $ Rumi_66.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_72.1.1                  <dbl> 0, 0, 0, 1, 1, 1, 0, 1, 0 #> $ Rumi_73.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_74.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_77.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_8.1                     <dbl> 1, 0, 1, 0, 0, 0, 1, 0, 1 #> $ Rumi_80.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Rumi_83.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_85.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_9.1                     <dbl> 1, 0, 0, 0, 1, 0, 1, 0, 1 #> $ Rumi_91.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Clos_Ruminococcaceae.1.2     <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_10.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_102.1.1                 <dbl> 0, 0, 0, 0, 1, 1, 0, 0, 0 #> $ Rumi_106.1.1                 <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_107.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_108.1.1                 <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_109.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_11.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_110.1.1                 <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0 #> $ Rumi_115.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_12.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_125.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_136.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_137.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_138.1                   <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_139.1.1                 <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_143.1                   <dbl> 0, 0, 1, 1, 0, 1, 1, 0, 0 #> $ Rumi_144.1.1                 <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 0 #> $ Rumi_146.1                   <dbl> 1, 0, 1, 0, 1, 0, 1, 0, 0 #> $ Rumi_149.1                   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_150.1                   <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_153.1                   <dbl> 0, 0, 1, 1, 0, 0, 1, 0, 1 #> $ Rumi_154.1                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_155.1.1                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_156.1.1                 <dbl> 0, 0, 1, 1, 1, 1, 1, 0, 0 #> $ Rumi_16.1.1                  <dbl> 0, 0, 0, 1, 1, 1, 1, 0, 1 #> $ Rumi_19.1.2                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_2.1.2                   <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_22.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_25.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_26.1.2                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_28.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_29.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_3.1.2                   <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Rumi_30.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Rumi_34.1.2                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_35.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_37.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_38.1.2                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_4.1.2                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_42.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_43.1                    <dbl> 1, 0, 0, 0, 0, 1, 1, 0, 1 #> $ Rumi_46.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_49.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1 #> $ Rumi_53.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_55.1.1                  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_56.1.1                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_62.1.1                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Rumi_64.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_65.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_69.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_71.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_74.1.2                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_75.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_78.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_8.1.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_84.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_87.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Rumi_89.1.1                  <dbl> 0, 0, 0, 0, 0, 1, 0, 1, 0 #> $ Rumi_90.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_91.1.2                  <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Rumi_92.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_94.1                    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ Rumi_95.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_10.1.2                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Rumi_13.1.1                  <dbl> 0, 1, 1, 1, 0, 1, 0, 1, 0 #> $ Rumi_16.1.2                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_18.1.2                  <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_19.1.3                  <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ Rumi_2.1.3                   <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Rumi_6.1                     <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0 #> $ Rumi_8.1.2                   <dbl> 1, 0, 1, 0, 0, 0, 1, 0, 0 #> $ Clos_Ruminococcaceae.2.1     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ S24._10.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ S24._12.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ S24._16.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ S24._17.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ S24._2.1                     <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ S24._21.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ S24._22.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ S24._23.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ S24._30.1                    <dbl> 1, 0, 1, 1, 0, 1, 0, 0, 0 #> $ S24._32.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ S24._33.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ S24._35.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ S24._36.1                    <dbl> 0, 0, 1, 0, 0, 0, 0, 1, 0 #> $ S24._38.1                    <dbl> 0, 0, 1, 0, 0, 1, 0, 0, 0 #> $ S24._39.1                    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ S24._41.1                    <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 0 #> $ S24._42.1                    <dbl> 0, 0, 0, 1, 0, 1, 0, 0, 0 #> $ S24._47.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ S24._48.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ S24._49.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ S24._50.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ S24._51.1                    <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 1 #> $ S24._53.1                    <dbl> 0, 0, 1, 1, 0, 1, 1, 0, 1 #> $ S24._55.1                    <dbl> 1, 1, 1, 0, 0, 0, 0, 1, 0 #> $ S24._7.1                     <dbl> 0, 0, 0, 1, 0, 1, 0, 1, 0 #> $ S24._8.1                     <dbl> 0, 0, 0, 1, 0, 1, 0, 1, 0 #> $ Syne_Synergistaceae.1        <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Turi_5.1                     <dbl> 1, 1, 1, 0, 1, 1, 1, 1, 0 #> $ Turi_6.1                     <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0 #> $ Turi_Turicibacteraceae.1     <dbl> 1, 1, 1, 0, 1, 1, 0, 1, 0 #> $ Turi_Turicibacteraceae.2     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Veil_2.1                     <dbl> 0, 0, 0, 1, 1, 0, 0, 1, 0 #> $ Veil_3.1                     <dbl> 0, 0, 0, 1, 0, 0, 0, 1, 0 #> $ Clos_Veillonellaceae.1       <dbl> 1, 0, 1, 1, 1, 0, 0, 1, 0 #> $ Verr_2.1                     <dbl> 0, 0, 1, 0, 0, 1, 0, 1, 0 #> $ Verr_3.1                     <dbl> 1, 0, 0, 0, 0, 1, 1, 0, 1 #> $ Verr_4.1                     <dbl> 1, 0, 0, 1, 0, 0, 1, 0, 1 #> $ Verr_5.1                     <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ Verr_8.1                     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Verr_Verrucomicrobiaceae.2   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1 #> $ Verr_2.1.1                   <dbl> 0, 0, 0, 0, 1, 1, 1, 0, 0 #> $ Verr_4.1.1                   <dbl> 0, 0, 1, 1, 1, 1, 0, 1, 0 #> $ Verr_Verrucomicrobiaceae.2.1 <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Vibr_2.1                     <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0 #> $ Vict_11.1                    <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0 #> $ Xant_Xanthomonadaceae.1      <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ YS2_11.1.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ YS2_13.1.1                   <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0 #> $ YS2_18.1.1                   <dbl> 0, 0, 1, 0, 0, 1, 1, 0, 0 #> $ YS2_21.1.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ YS2_23.1.1                   <dbl> 1, 0, 1, 0, 0, 1, 0, 0, 0 #> $ YS2_24.1.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ YS2_27.1.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ YS2_3.1.1                    <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0 #> $ YS2_33.1.1                   <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0 #> $ YS2_35.1.1                   <dbl> 1, 0, 1, 0, 0, 1, 0, 0, 0 #> $ YS2_37.1.1                   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0"},{"path":"https://github.com/nfj1380/mrIML/articles/Regression.html","id":"lets-load-that-data","dir":"Articles","previous_headings":"","what":"Lets load that data","title":"Regression","text":"###Parallel processing MrIML provides uses flexible future apply functionality set multi-core processing. example , set cluster using 4 cores. don’t set cluster, default settings used analysis run sequentially.","code":"# detectCores() #check how many cores you have available. We suggest keeping one core free for internet browsing etc.  cl <- parallel::makeCluster(4)  future::plan(cluster, workers=cl)"},{"path":"https://github.com/nfj1380/mrIML/articles/Regression.html","id":"running-the-analyis","dir":"Articles","previous_headings":"","what":"Running the analyis","title":"Regression","text":"Performing analysis similar classification example. Lets start constructing linear model data set. set Model 1 linear regression. See https://www.tidymodels.org/find/ regression model options Note ‘mode’ must regression MrIMLpredicts, model set ‘regression’. Model performance can examined way classification example, however metrics different. provide root mean square error (rmse) R2. can see overall R2 0.13 substantial variation across loci predictive performance. Lets compare performance linear models random forests. Random forests computational engine gradient forests. Notice random forests two hyperparameters tune; mtry (number features randomly include split) min_n (minimum number data points node required node split ). syntax ‘tune()’ acts placeholder tell MrIML tune hyperparamters across grid values (defined MRIML predicts ‘tune_grid_size’ argument). Different algorithms different hyperparameters.See https://www.tidymodels.org/find/parsnip/ parameter details. Note large grid sizes (>10) algorithms lots hyperparameters (extreme gradient boosting) computationally demanding. case choose grid size 5.  ## Plotting can see predictive performance actually slightly less using random forests (overall R2 = 0.12) loci random forests better linear models sometimes worse. choose? Generally simpler models preferred (linear model case) depends important think non-linear response . future versions MrIML implement ensemble models overcome issue. time-look variable importance random forest based model.  Cutoff reduces number individual SNP plots presented second plot ‘plot.pca=’yes’’ enables variable importance scores analysed using principal component analysis (PCA) SNPs closer PCA space shaped similar combinations features. can see bio_18 (summer precipitation), bio_1 (mean annual temperature) bio_10 (mean summer temperature) important features overall. Summer precipitation important Fitzpatrick et al otherwise results similar. second plot shows individual models (r2 > 0.1, data need play around threshold) can see SNPs bio_1 important whereas another MEM.1 prominent.PCA shows candidate 5119, 9287, 5033 108 shaped similarly features included may, example, product linked selection. Note can also calculate bootstraps importance scores (partial dependencies), functionality still development regression models. Now can explore model plotting relationships SNPs feature set. Lets choose bio_1 (mean annual temperature) plot individual global (average SNPs) partial dependency (PD) plots.  first plot partial dependency SNPs respond mean annual temperature. mean respond prediction surface (line) deviates across Y axis PD plots. measure deviation calculating standard deviation use threshold (‘sd thresh=0.01’ case differ data set) ease visualization relationships. second plot smoothed average partial dependency SNPs across annual temperature gradient. similar pattern observed Fitzpatrick et al except slight decline SNP turnover mean annual temperatures > 0. Combined,can see candidate SNPs driving pattern may warrant interrogation. Lets compare PDs accumulated local effect plots less sensitive correlations among features (see Molnar 2019).  effect mean annual temperature SNP turnover distinct global ALE plot. may mean correlations features may important predictions. MrIML easy use functionality can can quantify interactions features. Note can take compute topic future work. touching surface possible terms interrogating model. Flashlight IML packages wide variety tools can offer novel insights models perform. See https://cran.r-project.org/web/packages/flashlight/vignettes/flashlight.html https://cran.r-project.org/web/packages/iml/vignettes/intro.html options.","code":"model_lm <- #model used to generate yhat   # specify that the model is a random forest   linear_reg() %>%   # select the engine/package that underlies the model   set_engine(\"lm\") %>%   # choose either the continuous regression or binary classification mode   set_mode(\"regression\")  yhats_lm <- mrIMLpredicts(X=X,                           Y=Y,                           X1=NULL,                           Model=model_lm,                           balance_data='no',                           mode='regression',                           prop=0.7,                           morans=F,                           tune_grid_size= 10,                           k=10,                           racing=F) ## Balanced data= up updamples and down downsampled to create a balanced set. For regression 'no' has to be selected. #>   |                                                                              |                                                                      |   0%  |                                                                              |====                                                                  |   5%  |                                                                              |=======                                                               |  10%  |                                                                              |==========                                                            |  15%  |                                                                              |==============                                                        |  20%  |                                                                              |==================                                                    |  25%  |                                                                              |=====================                                                 |  30%  |                                                                              |========================                                              |  35%  |                                                                              |============================                                          |  40%  |                                                                              |================================                                      |  45%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================                                |  55%  |                                                                              |==========================================                            |  60%  |                                                                              |==============================================                        |  65%  |                                                                              |=================================================                     |  70%  |                                                                              |====================================================                  |  75%  |                                                                              |========================================================              |  80%  |                                                                              |============================================================          |  85%  |                                                                              |===============================================================       |  90%  |                                                                              |==================================================================    |  95%  |                                                                              |======================================================================| 100% #racing can't be used for linear models - no parameters to tune  #save(yhats, file='Regression_lm') #always a good idea ModelPerf_lm <- mrIMLperformance(yhats_lm,                                  Model=model_lm,                                  Y=Y,                                  mode='regression') ModelPerf_lm[[1]] #predictive performance for individual responses.  #>              response model_name       rmse    rsquared #> 1   CANDIDATE_GI5_108 linear_reg 0.06426578 0.021187687 #> 2   CANDIDATE_GI5_198 linear_reg 0.20118507 0.256330020 #> 3   CANDIDATE_GI5_268 linear_reg 0.09413783 0.001884908 #> 4    CANDIDATE_GI5_92 linear_reg 0.13117710 0.075625051 #> 5  CANDIDATE_GI5_1950 linear_reg 0.24207693 0.555279383 #> 6  CANDIDATE_GI5_2382 linear_reg 0.21693924 0.071970365 #> 7  CANDIDATE_GI5_2405 linear_reg 0.12739650 0.573200547 #> 8  CANDIDATE_GI5_2612 linear_reg 0.15119276 0.491409229 #> 9  CANDIDATE_GI5_2641 linear_reg 0.16484592 0.003718373 #> 10   CANDIDATE_GI5_33 linear_reg 0.13251763 0.549556034 #> 11 CANDIDATE_GI5_3966 linear_reg 0.27581779 0.001344843 #> 12 CANDIDATE_GI5_5033 linear_reg 0.07460969 0.164143944 #> 13 CANDIDATE_GI5_5090 linear_reg 0.15172275 0.207067832 #> 14 CANDIDATE_GI5_5119 linear_reg 0.16307676 0.000889029 #> 15 CANDIDATE_GI5_8997 linear_reg 0.12887369 0.578833028 #> 16 CANDIDATE_GI5_9287 linear_reg 0.15968264 0.083272899 #> 17 CANDIDATE_GI5_9447 linear_reg 0.17151250 0.028827830 #> 18 CANDIDATE_GI5_9551 linear_reg 0.16687285 0.424767550 #> 19 CANDIDATE_GI5_9585 linear_reg 0.15578584 0.599975713 #> 20 CANDIDATE_GI5_9659 linear_reg 0.12543953 0.573035761 ModelPerf_lm[[2]]#overall average r2  #> [1] 0.1549564 model_rf <- rand_forest(trees = 100,               mode = \"regression\",               mtry = tune(),               min_n = tune()) %>% #100 trees are set for brevity. Aim to start with 1000          set_engine(\"randomForest\")  yhats_rf <- mrIMLpredicts(X=X,                           Y=Y,                           Model=model_rf,                           balance_data='no',                           mode='regression',                           tune_grid_size=5,                           seed = sample.int(1e8, 1)) #>   |                                                                              |                                                                      |   0%  |                                                                              |====                                                                  |   5%  |                                                                              |=======                                                               |  10%  |                                                                              |==========                                                            |  15%  |                                                                              |==============                                                        |  20%  |                                                                              |==================                                                    |  25%  |                                                                              |=====================                                                 |  30%  |                                                                              |========================                                              |  35%  |                                                                              |============================                                          |  40%  |                                                                              |================================                                      |  45%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================                                |  55%  |                                                                              |==========================================                            |  60%  |                                                                              |==============================================                        |  65%  |                                                                              |=================================================                     |  70%  |                                                                              |====================================================                  |  75%  |                                                                              |========================================================              |  80%  |                                                                              |============================================================          |  85%  |                                                                              |===============================================================       |  90%  |                                                                              |==================================================================    |  95%  |                                                                              |======================================================================| 100%  #save(yhats, file='Regression_rf')  ModelPerf_rf <- mrIMLperformance(yhats_rf,                                  Model=model_rf,                                  Y,                                  mode='regression')  ModelPerf_rf[[1]] #predictive performance for individual responses.  #>              response  model_name       rmse    rsquared #> 1   CANDIDATE_GI5_108 rand_forest 0.04090471 0.047682012 #> 2   CANDIDATE_GI5_198 rand_forest 0.12915210 0.598071204 #> 3   CANDIDATE_GI5_268 rand_forest 0.06664649 0.415936430 #> 4    CANDIDATE_GI5_92 rand_forest 0.08365576 0.076770963 #> 5  CANDIDATE_GI5_1950 rand_forest 0.12109386 0.617765960 #> 6  CANDIDATE_GI5_2382 rand_forest 0.11288976 0.111316554 #> 7  CANDIDATE_GI5_2405 rand_forest 0.13193547 0.535127395 #> 8  CANDIDATE_GI5_2612 rand_forest 0.13217971 0.608224408 #> 9  CANDIDATE_GI5_2641 rand_forest 0.08422936 0.005897323 #> 10   CANDIDATE_GI5_33 rand_forest 0.13399965 0.709763696 #> 11 CANDIDATE_GI5_3966 rand_forest 0.15185373 0.045949308 #> 12 CANDIDATE_GI5_5033 rand_forest 0.04755493 0.010344961 #> 13 CANDIDATE_GI5_5090 rand_forest 0.08205244 0.779996924 #> 14 CANDIDATE_GI5_5119 rand_forest 0.05939268 0.004521246 #> 15 CANDIDATE_GI5_8997 rand_forest 0.13711630 0.650710209 #> 16 CANDIDATE_GI5_9287 rand_forest 0.06407835 0.047821902 #> 17 CANDIDATE_GI5_9447 rand_forest 0.11846364 0.151671114 #> 18 CANDIDATE_GI5_9551 rand_forest 0.11316072 0.592370327 #> 19 CANDIDATE_GI5_9585 rand_forest 0.13721247 0.429543922 #> 20 CANDIDATE_GI5_9659 rand_forest 0.11037509 0.649462768 ModelPerf_rf[[2]]#overall average r2  #> [1] 0.1028974  #easier to see with plots plots <- mrPerformancePlot(ModelPerf1=ModelPerf_lm,                            ModelPerf2 = ModelPerf_rf,                            mod_names=c('linear_reg','rand_forest'),                            mode='regression' )   plots[[1]] plots[[2]] VI <- mrvip(yhats=yhats_rf,             mrBootstrap_obj = NULL,             X=X,             Y=Y,             mode='regression',             threshold = 0.1,             global_top_var = 10,             local_top_var = 5,             taxa='CANDIDATE_GI5_9585',             ModelPerf=ModelPerf_rf)  #> [1] \"here\"  VI[[3]] #Importance plot VI[[4]] #PCA flashlightObj <- mrFlashlight(yhats=yhats_rf,                               X=X,                               Y=Y,                               response = \"multi\",                               mode=\"regression\")  profileData_pd <- light_profile(flashlightObj,                                 v = \"bio_1\") #partial dependencies  mrProfileplot(profileData_pd,               sdthresh =0.01) #>  Press [enter] to continue to the global summary plot #> `geom_smooth()` using formula = 'y ~ x' profileData_ale <- light_profile(flashlightObj,                                  v = \"bio_1\",                                  type = \"ale\") #accumulated local effects  mrProfileplot(profileData_ale,               sdthresh =0.01) #>  Press [enter] to continue to the global summary plot #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://github.com/nfj1380/mrIML/articles/Swine biosecurity.html","id":"lets-load-that-data","dir":"Articles","previous_headings":"","what":"Lets load that data","title":"Swine biosecurity","text":"synthesized dataset simulate PRRSV infection, biosecurity practices farm demographics swine farms across united states. Please note data included package simulated, reflection real farm, company state.","code":"set.seed(130) #set the seed to ensure consistency data <- as.data.frame(mrIML::biosecurity_vignette_data)"},{"path":"https://github.com/nfj1380/mrIML/articles/Swine biosecurity.html","id":"defining-your-model-engine","dir":"Articles","previous_headings":"","what":"Defining your model engine","title":"Swine biosecurity","text":"random forest model, used classification example. However models available within MrIML can found .","code":"#split predictor variables and outcome Y <- as.data.frame(data %>% select(1)) X <- data %>% select(-c(1, 44, 45)) #remove class, group and ID model1 <- #model used to generate yhat   #specify that the model is a random forest   rand_forest(trees = 1000,               mtry = tune(),               min_n = tune(),               mode = \"classification\") %>%    set_engine(\"randomForest\") %>%    # #select the engine/package that underlies the model   #must be set to classification for classification problems   set_mode(\"classification\")"},{"path":"https://github.com/nfj1380/mrIML/articles/Swine biosecurity.html","id":"parallel-processing","dir":"Articles","previous_headings":"","what":"Parallel processing","title":"Swine biosecurity","text":"MrIML provides uses flexible future apply functionality set multi-core processing. example , set cluster using 4 cores. don’t set cluster, default settings used analysis run sequentially.","code":"# detectCores() #check how many cores you have available. We suggest keeping one core free for internet browsing etc. cl <- parallel::makeCluster(4) plan(cluster, workers=cl)"},{"path":"https://github.com/nfj1380/mrIML/articles/Swine biosecurity.html","id":"running-the-analysis","dir":"Articles","previous_headings":"","what":"Running the analysis","title":"Swine biosecurity","text":"Now can train test model. can assess model performance using number performance metrics including area curve (AUC), sensitivity, specificity Matthews correlation coefficient (MCC).","code":"yhats <- mrIMLpredicts(X=X, #features/predictors                         Y=Y, #response data                        Model=model1, #specify your model                        balance_data='no', #chose how to balance your data                         mode='classification', #chose your mode (classification versus regression)                        seed = 123,#set seed                        racing=T) #turn off racing autotuning for now #>   |                                                                              |                                                                      |   0%  |                                                                              |======================================================================| 100% ModelPerf <- mrIMLperformance(yhats=yhats,                               Model=model1,                               Y=Y,                               mode='classification')   ModelPerf[[1]] #predictive performance for individual responses  #>   response  model_name           roc_AUC              mcc       sensitivity #> 1    Class rand_forest 0.596059113300493 0.18194421330583 0.714285714285714 #>                ppv       specificity prevalence #> 1 0.46551724137931 0.491803278688524        0.5 ModelPerf[[2]]#overall predictive performance. r2 for regression and MCC for classification #> [1] 0.1819442"},{"path":"https://github.com/nfj1380/mrIML/articles/Swine biosecurity.html","id":"benchmarking-global-importance","dir":"Articles","previous_headings":"","what":"Benchmarking: global importance","title":"Swine biosecurity","text":"can look variable importance. dependence outcome biosecurity variables. can explore assess partial dependence variable. isolate dependence one variable visualize dependence changes different observed values. ### Benchmarking: predicted risk following function allows visualize compare predicted risk among within groups","code":"#calculate variable importance #still got a bug here to do with the PCA impVI <- mrvip(   yhats=yhats,   mrBootstrap_obj = NULL,   X = X,   X1 = NULL,   Y = Y,   mode = \"classification\",   threshold = 0.1,   global_top_var = 10,   local_top_var = 5,   taxa = NULL,   ModelPerf = ModelPerf )  impVI[[3]] #importance #create a flashlight object fl <- mrFlashlight(yhats=yhats, X=X, Y=Y,                     response=\"single\",                     index=1,                    mode='classification')  #plot partial dependence profiles plot(light_profile(fl, v = \"Premises_in_3_miles\")) #apply the trained model to the entire data set to provide risk of predicted outbreak fit_bio <- pull_workflow_fit(yhats[[1]]$mod1_k)  predict(fit_bio,         X[, colnames(yhats[[i]]$data[-1]),         drop = FALSE],         type = \"prob\"         )$`.pred_1`  preds_pos <- predict(fit_bio, X, \"prob\") #this doesnt work data$Predicted <- preds_pos$.pred_1 #process data ready for the function data$Class <- as.factor(data$Class) data<-data%>%   mutate(Class = revalue(Class,                          c(\"1\" = \"Positive\", \"0\" = \"Negative\")))  data$Class <- relevel(data$Class, \"Positive\") data1 <- data #plot among group comparison of predicted risk mrBenchmark(data = \"data1\", Y = \"Class\", pred = \"Predicted\", group = \"Group\", type = \"external\") #plot within group comparison of predicted risk mrBenchmark(data = \"data1\",             Y = \"Class\",             pred = \"Predicted\",             group = \"Group\",             label_by = \"ID\",             type = \"internal\")"},{"path":"https://github.com/nfj1380/mrIML/articles/Swine biosecurity.html","id":"benchmarking-local-importance","dir":"Articles","previous_headings":"","what":"Benchmarking: local importance","title":"Swine biosecurity","text":"investigate interpret contribution variables individual level, must use local explanation method. implement local breakDown explainer. mrLocalExplainer produces aggregated individual results variable contribution. Variables phi > 0 contribute increase predicted PRRSV outbreak risk, variables phi < 0 contribute decrease predicted outbreak risk. Individual plots produced list object LE_indiv_plots. plot corresponds single farm. example positive farm negative farm shown . positive farm can see yards public road garbage collection contributing increased outbreak risk, manure removals repair visits contributing decreased outbreak risk. Likewise, negative farm yards public road downtime required manure removal personnel contributing increased outbreak risk, feed deliveries manure removals contributing decreased outbreak risk. session MrIML funded Critical Agricultural Research Extension 2019-68008-29910 USDA National Institute Food Agriculture.","code":"#Use this function to implement the local explainer  data<-data%>%   mutate(Class = revalue(Class,                 c(\"1\" = \"Positive\", \"0\" = \"Negative\")))  data$Class <- relevel(data$Class, \"Positive\") X1 <- X mrLocalExplainer(X = X1,                  Model = yhats,                  Y = data$Class) LE_indiv_plots[1] LE_indiv_plots[2]"},{"path":"https://github.com/nfj1380/mrIML/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nick Fountain-Jone. Author, maintainer. Gustavo Machado. Author. Chris Kozakiewicz. Author. Nick Clark. Author.","code":""},{"path":"https://github.com/nfj1380/mrIML/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fountain-Jone N, Machado G, Kozakiewicz C, Clark N (2024). mrIML: Multi Response Interpretable Machine Learning. R package version 2.0.0, https://github.com/nfj1380/mrIML.","code":"@Manual{,   title = {mrIML: Multi Response Interpretable Machine Learning},   author = {Nick Fountain-Jone and Gustavo Machado and Chris Kozakiewicz and Nick Clark},   year = {2024},   note = {R package version 2.0.0},   url = {https://github.com/nfj1380/mrIML}, }"},{"path":"https://github.com/nfj1380/mrIML/index.html","id":"mriml-multivariate-multi-response-interpretable-machine-learning-","dir":"","previous_headings":"","what":"mrIML","title":"mrIML","text":"package aims enable users build interpret multivariate machine learning models harnessing tidyverse (tidy model syntax particular). package builds ideas Gradient Forests Ellis et al 2012), ecological genomic approaches Fitzpatrick Keller, 2014 multi-response stacking algorithms [Xing et al 2019]. package can use multi-response machine learning problem, designed handle data common community ecology (site species data) ecological genomics (individual population SNP loci).","code":""},{"path":"https://github.com/nfj1380/mrIML/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"mrIML","text":"Install stable version package:","code":"#install.packages(\"devtools\") #devtools::install_github('nfj1380/mrIML') library(mrIML)"},{"path":"https://github.com/nfj1380/mrIML/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"mrIML","text":"mrIML designed used single function call used ad-hoc fashion via individual function calls. following section give overview simple use case. using function see function documentation. core functions regression classification : mrIMLpredicts, mrIMLperformance, mrvip, mrFlashlight, andmrProfileplots. also allow users get bootstrapped estimations partial dependencies variable importance using mrBootstrap. first step using package load follows.","code":""},{"path":"https://github.com/nfj1380/mrIML/index.html","id":"model-component","dir":"","previous_headings":"","what":"Model component","title":"mrIML","text":"Now data loaded ready go can formulate model using tidymodel syntax. case binary data (SNP presence/absence loci) data also counts continuous (set_model argument “regression” instead “classification”). user can specify model ‘tidymodel’ universe ‘model 1’ (see https://www.tidymodels.org/find/ details). However, done testing random forests (rf) glms (generalized linear models). specify random forest classification model model applied response.","code":"model_rf <-rand_forest(trees = 100,               mode = \"classification\",               mtry = tune(),               min_n = tune()) %>% #100 trees are set for brevity. Aim to start with 1000              set_engine(\"randomForest\")"},{"path":"https://github.com/nfj1380/mrIML/index.html","id":"mrimlpredicts","dir":"","previous_headings":"Model component","what":"mrIMLpredicts","title":"mrIML","text":"function represents core functionality package includes results reporting, plotting optional saving. requires data frame X t( snp data example) Y represented covariates features. Load example data (cite) data mrIML.","code":"fData <- filterRareCommon (Responsedata,                            lower=0.4,                            higher=0.7)  data <- fData[1:20]"},{"path":"https://github.com/nfj1380/mrIML/index.html","id":"parallel-processing","dir":"","previous_headings":"","what":"Parallel processing","title":"mrIML","text":"MrIML provides uses flexible future apply functionality set multi-core processing. example , set cluster using 4 cores. don’t set cluster, default settings used analysis run sequentially.","code":"# detectCores() #check how many cores you have available. We suggest keeping one core free for internet browsing etc.  cl <- parallel::makeCluster(4)      plan(cluster,      workers=cl) Y <- fData #For simplicity when comparing #Define set the outcomes of interest str(Features)  #> 'data.frame':    20 obs. of  19 variables: #>  $ Grassland       : num  0.07 0.0677 0.1845 0.0981 0.1578 ... #>  $ Shrub.Scrub     : num  0.557 0.767 0.524 0.786 0.842 ... #>  $ Forest          : num  0.01072 0.030588 0.008615 0.000662 0.000616 ... #>  $ HighlyDev       : num  0 0 0.00225 0 0 ... #>  $ Urban           : num  0 0 0.00159 0 0 ... #>  $ Suburban        : num  0.00357 0.13268 0.01325 0.00119 0 ... #>  $ Exurban         : num  0.00622 0.03019 0 0.01906 0 ... #>  $ Altered         : num  0.441 0.182 0.114 0.12 0 ... #>  $ Distance        : num  1.321 0.492 3.231 5.629 4.739 ... #>  $ Latitude        : num  33.8 33.8 33.8 33.8 33.8 ... #>  $ Longitude       : num  -118 -118 -118 -118 -118 ... #>  $ Age             : int  3 0 3 2 3 3 2 3 3 3 ... #>  $ Sex             : int  1 1 1 1 0 0 0 1 1 1 ... #>  $ Relatedness.PCO1: num  -0.1194 -0.0389 -0.1618 -0.1811 -0.1564 ... #>  $ Relatedness.PCO2: num  -0.1947 -0.0525 -0.321 -0.0827 0.1 ... #>  $ Relatedness.PCO3: num  -0.191 -0.0874 0.0541 -0.0627 -0.0111 ... #>  $ Relatedness.PCO4: num  0.1117 0.2422 0.0974 0.2129 0.2259 ... #>  $ Relatedness.PCO5: num  0.06405 0.0706 0.03514 -0.00084 0.0894 ... #>  $ Relatedness.PCO6: num  -0.0432 0.0683 -0.0805 0.2247 -0.055 ... #Remove NAs from the feature/predictor data. FeaturesnoNA<-Features[complete.cases(Features), ] X <- FeaturesnoNA #For simplicity #For more efficient testing for interactions (more variables more interacting pairs) X <- FeaturesnoNA[c(1:3)] #Three features only   yhats_rf <- mrIMLpredicts(X=X,Y=Y, #specify which data to use                           Model=model_rf, #what model                           balance_data='no', #balance the data or not                            mode='classification', #classification or regression                           k=5,                           tune_grid_size=5, #tuning parameters                           seed = 123,                           racing=F)  #Set seed #>   |                                                                              |                                                                      |   0%  |                                                                              |==                                                                    |   3%  |                                                                              |=====                                                                 |   7%  |                                                                              |=======                                                               |  10%  |                                                                              |==========                                                            |  14%  |                                                                              |============                                                          |  17%  |                                                                              |==============                                                        |  21%  |                                                                              |=================                                                     |  24%  |                                                                              |===================                                                   |  28%  |                                                                              |======================                                                |  31%  |                                                                              |========================                                              |  34%  |                                                                              |===========================                                           |  38%  |                                                                              |=============================                                         |  41%  |                                                                              |===============================                                       |  45%  |                                                                              |==================================                                    |  48%  |                                                                              |====================================                                  |  52%  |                                                                              |=======================================                               |  55%  |                                                                              |=========================================                             |  59%  |                                                                              |===========================================                           |  62%  |                                                                              |==============================================                        |  66%  |                                                                              |================================================                      |  69%  |                                                                              |===================================================                   |  72%  |                                                                              |=====================================================                 |  76%  |                                                                              |========================================================              |  79%  |                                                                              |==========================================================            |  83%  |                                                                              |============================================================          |  86%  |                                                                              |===============================================================       |  90%  |                                                                              |=================================================================     |  93%  |                                                                              |====================================================================  |  97%  |                                                                              |======================================================================| 100%  ModelPerf <- mrIMLperformance(yhats=yhats_rf,                               Model=model_rf,                               Y=Y,                               mode='classification')  ModelPerf[[1]] #Predictive performance for individual responses  #>    response  model_name            roc_AUC                mcc       sensitivity #> 1   env_131 rand_forest  0.642857142857143  0.327326835353989 0.285714285714286 #> 2   env_163 rand_forest  0.238095238095238 -0.327326835353989                 0 #> 3   env_164 rand_forest  0.895833333333333  0.534522483824849               0.5 #> 4   env_167 rand_forest  0.833333333333333               <NA>                 1 #> 5   env_169 rand_forest  0.642857142857143  0.327326835353989 0.285714285714286 #> 6   env_212 rand_forest  0.444444444444444  0.272165526975909                 1 #> 7    env_23 rand_forest               0.48 -0.333333333333333                 0 #> 8    env_24 rand_forest               0.28               <NA>                 1 #> 9    env_41 rand_forest  0.208333333333333 -0.408248290463863 0.333333333333333 #> 10   env_47 rand_forest               0.86  0.816496580927726                 1 #> 11   env_59 rand_forest  0.642857142857143  0.327326835353989 0.285714285714286 #> 12    env_8 rand_forest            0.78125               <NA>                 0 #> 13   env_84 rand_forest  0.642857142857143  0.327326835353989 0.285714285714286 #> 14   env_85 rand_forest  0.642857142857143  0.327326835353989 0.285714285714286 #> 15   env_86 rand_forest             0.4375               <NA>                 1 #> 16  pol_105 rand_forest  0.854166666666667  0.408248290463863 0.333333333333333 #> 17  pol_108 rand_forest  0.761904761904762  0.327326835353989 0.285714285714286 #> 18  pol_111 rand_forest  0.895833333333333  0.534522483824849               0.5 #> 19  pol_117 rand_forest               0.78  0.654653670707977                 1 #> 20  pol_132 rand_forest               0.86  0.816496580927726                 1 #> 21  pol_159 rand_forest               0.28  0.333333333333333                 1 #> 22  pol_258 rand_forest 0.0833333333333333 -0.356348322549899               0.5 #> 23   pol_30 rand_forest               0.86  0.816496580927726                 1 #> 24  pol_340 rand_forest 0.0952380952380952 -0.218217890235992 0.142857142857143 #> 25  pol_353 rand_forest             0.4375               <NA>                 1 #> 26  pol_366 rand_forest  0.642857142857143  0.327326835353989 0.285714285714286 #> 27   pol_87 rand_forest               0.86  0.816496580927726                 1 #> 28   pol_88 rand_forest               0.86  0.816496580927726                 1 #> 29   pol_89 rand_forest               0.86  0.816496580927726                 1 #>                  ppv       specificity        prevalence #> 1                  1                 1 0.421052631578947 #> 2  0.714285714285714                 0 0.631578947368421 #> 3                  1                 1 0.421052631578947 #> 4                  0               0.4 0.421052631578947 #> 5                  1                 1 0.421052631578947 #> 6  0.444444444444444 0.166666666666667  0.68421052631579 #> 7                0.8                 0 0.631578947368421 #> 8                  0               0.5 0.421052631578947 #> 9               0.25               0.4 0.473684210526316 #> 10               0.8 0.833333333333333 0.473684210526316 #> 11                 1                 1 0.421052631578947 #> 12                 1               NaN 0.473684210526316 #> 13                 1                 1 0.421052631578947 #> 14                 1                 1 0.421052631578947 #> 15                 0               0.4 0.421052631578947 #> 16                 1                 1 0.473684210526316 #> 17                 1                 1 0.421052631578947 #> 18                 1                 1 0.421052631578947 #> 19               0.6 0.714285714285714 0.473684210526316 #> 20               0.8 0.833333333333333 0.473684210526316 #> 21               0.2 0.555555555555556 0.473684210526316 #> 22 0.166666666666667 0.285714285714286 0.473684210526316 #> 23               0.8 0.833333333333333 0.473684210526316 #> 24 0.666666666666667               0.5 0.421052631578947 #> 25                 0               0.4 0.421052631578947 #> 26                 1                 1 0.421052631578947 #> 27               0.8 0.833333333333333 0.473684210526316 #> 28               0.8 0.833333333333333 0.473684210526316 #> 29               0.8 0.833333333333333 0.473684210526316 ModelPerf[[2]]#Overall predictive performance. r2 for regression and MCC for classification #> [1] 0.2856634"},{"path":"https://github.com/nfj1380/mrIML/index.html","id":"plotting","dir":"","previous_headings":"","what":"Plotting","title":"mrIML","text":"## Effect feature genetic change also wrap flashlight functionality visualize marginal (.e. partial dependencies) conditional (accumulated local effects) effect feature genetic change. Partial dependencies take longer calculate sensitive correlated features","code":"bs_impVI <- mrvip(   mrBootstrap_obj = NULL,   yhats = yhats_rf,   X = X,   Y = Y,   mode = 'classification',   threshold = 0.8,   global_top_var = 10,   local_top_var = 5,   taxa = 'pol_132',   ModelPerf = ModelPerf) #> [1] \"here\"  bs_impVI[[3]] #importance bs_impVI[[4]] #PCA flashlightObj <- mrFlashlight(yhats_rf,                               X=X,                               Y=Y,                               response = \"single\",                               index=1,                               mode='classification')  #plot prediction scatter for all responses. Gets busy with  plot(light_scatter(flashlightObj,                    v = \"Forest\",                    type = \"predicted\")) #plots everything on one plot (partial dependency, ALE, scatter) plot(light_effects(flashlightObj,                    v = \"Grassland\"),                    use = \"all\") profileData_ale <- light_profile(flashlightObj,                                  v = \"Grassland\",                                  type = \"ale\") #accumulated local effects  mrProfileplot(profileData_ale,               sdthresh =0.01) #>  Press [enter] to continue to the global summary plot #the second plot is the cumulative turnover function"},{"path":"https://github.com/nfj1380/mrIML/index.html","id":"interacting-predictors-or-features","dir":"","previous_headings":"","what":"Interacting predictors or features","title":"mrIML","text":"Finally, can assess features interact overall shape genetic change. warned memory intensive. Future updates package enable users visualize interactions explore detail using 2D ALE plots example.","code":"int_ <- mrInteractions(yhats=yhats_rf,                        X,                        Y,                        num_bootstrap=10,                        feature = 'Plas',                         top.int=10) #10 bootstraps to keep it short. top int focusses on the 10 top interactions (all of them in this case).  int_[[1]] # overall plot #int_[[2]] # individual plot for the response of choice  #int_[[3]] # two way plot"},{"path":"https://github.com/nfj1380/mrIML/index.html","id":"recent-mriml-publications","dir":"","previous_headings":"","what":"Recent mrIML publications","title":"mrIML","text":"Fountain-Jones, N. M., Kozakiewicz, C. P., Forester, B. R., Landguth, E. L., Carver, S., Charleston, M., Gagne, R. B., Greenwell, B., Kraberger, S., Trumbo, D. R., Mayer, M., Clark, N. J., & Machado, G. (2021). MrIML: Multi-response interpretable machine learning model genomic landscapes. Molecular Ecology Resources, 21, 2766– 2781. https://doi.org/10.1111/1755-0998.13495 Sykes, . L., Silva, G. S., Holtkamp, D. J., Mauch, B. W., Osemeke, O., Linhares, D. C.L., & Machado, G. (2021). Interpretable machine learning applied -farm biosecurity porcine reproductive respiratory syndrome virus. Transboundary Emerging Diseases, 00, 1– 15. https://doi.org/10.1111/tbed.14369","code":""},{"path":"https://github.com/nfj1380/mrIML/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"mrIML","text":"Xing, L, Lesperance, ML Zhang, X (2020). Simultaneous prediction multiple outcomes using revised stacking algorithms. Bioinformatics, 36, 65-72. doi:10.1093/bioinformatics/btz531. Fitzpatrick, M.C. & Keller, S.R. (2015) Ecological genomics meets community-level modelling biodiversity: mapping genomic landscape current future environmental adaptation. Ecology Letters 18, 1–16.doi.org/10.1111/ele.12376 Ellis, N., Smith, S.J. Pitcher, C.R. (2012), Gradient forests: calculating importance gradients physical predictors. Ecology, 93: 156-168. doi:10.1890/11-0252.1","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/Features.html","id":null,"dir":"Reference","previous_headings":"","what":"Landscape and host feature (variable) data — Features","title":"Landscape and host feature (variable) data — Features","text":"Landscape host feature (variable) data","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/Features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Landscape and host feature (variable) data — Features","text":"","code":"Features"},{"path":"https://github.com/nfj1380/mrIML/reference/Features.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Landscape and host feature (variable) data — Features","text":"data frame 20 columns (features) 19 rows (sampled bobcat locations). columns include: Grassland Proportion grassland 5km radius sample location. Shrub.Scrub Proportion scrub 5km radius sample location. Forest Proportion forest 5km radius sample location. ... columns representing additional features, description feature represent.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/Features.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Landscape and host feature (variable) data — Features","text":"Fountain‐Jones, NM, Craft, , Funk, WC, et al. Urban landscapes can change virus gene flow evolution fragmentation‐sensitive carnivore. Mol Ecol. 2017; 26: 6487–6498. https://doi.org/10.1111/mec.14375","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/Features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Landscape and host feature (variable) data — Features","text":"","code":"if (FALSE) { # \\dontrun{   head(Features) } # }"},{"path":"https://github.com/nfj1380/mrIML/reference/MrShapely.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate SHAP (SHapley Additive exPlanations) Plots for Multiple Models and Responses — MrShapely","title":"Generate SHAP (SHapley Additive exPlanations) Plots for Multiple Models and Responses — MrShapely","text":"function generates SHAP (SHapley Additive exPlanations) plots multiple models responses.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/MrShapely.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate SHAP (SHapley Additive exPlanations) Plots for Multiple Models and Responses — MrShapely","text":"","code":"MrShapely(   yhats,   MultRespVars = Resp,   taxa = NULL,   kind = \"beeswarm\",   max_display = 15L,   color_var = NULL,   getFeaturePlot = TRUE,   getDependencyPlot = TRUE,   get2DDependencyPlot = TRUE,   num_cores = 2,   class_selection = NULL )"},{"path":"https://github.com/nfj1380/mrIML/reference/MrShapely.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate SHAP (SHapley Additive exPlanations) Plots for Multiple Models and Responses — MrShapely","text":"yhats list model prediction objects. object contain model, data, class information. MultRespVars data frame containing response variables prediction. taxa optional vector specifying responses include based indices. kind character string specifying type plots (e.g., \"beeswarm\" feature effect plot, \"bar\" variable importance plot, \"\"). max_display integer specifying maximum number features display. color_var variable use coloring dependency plots. getFeaturePlot logical indicating whether generate feature effect plots. getDependencyPlot logical indicating whether generate dependency plots. num_cores integer specifying number CPU cores use parallel processing. class_selection optional vector specifying classes include plots. x_features character vector specifying features consider plots. y_features character vector specifying response features interaction plots. interactions logical indicating whether create interaction effect plots. getInteractionPlot logical indicating whether generate interaction plots.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/MrShapely.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate SHAP (SHapley Additive exPlanations) Plots for Multiple Models and Responses — MrShapely","text":"ggplot object containing SHAP plots specified responses features. Note function may work algorithm classe (e.g., neural nets)","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/MrShapely.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate SHAP (SHapley Additive exPlanations) Plots for Multiple Models and Responses — MrShapely","text":"","code":"# Example usage: MrShapely(yhats, MultRespVars = Resp) #> Error in plan(future::multisession, workers = num_cores): could not find function \"plan\""},{"path":"https://github.com/nfj1380/mrIML/reference/Responsedata.html","id":null,"dir":"Reference","previous_headings":"","what":"Viral single nucleotide polymorphism (SNP) data — Responsedata","title":"Viral single nucleotide polymorphism (SNP) data — Responsedata","text":"Viral single nucleotide polymorphism (SNP) data","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/Responsedata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Viral single nucleotide polymorphism (SNP) data — Responsedata","text":"","code":"Responsedata"},{"path":"https://github.com/nfj1380/mrIML/reference/Responsedata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Viral single nucleotide polymorphism (SNP) data — Responsedata","text":"data frame 171 columns (column SNP) 19 rows (row sampled bobcat). columns represent SNPs rows represent individual bobcats.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/Responsedata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Viral single nucleotide polymorphism (SNP) data — Responsedata","text":"Fountain‐Jones, NM, Craft, , Funk, WC, et al. Urban landscapes can change virus gene flow evolution fragmentation‐sensitive carnivore. Mol Ecol. 2017; 26: 6487–6498. https://doi.org/10.1111/mec.14375","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/Responsedata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Viral single nucleotide polymorphism (SNP) data — Responsedata","text":"dataset includes presence/absence data one locus across 19 bobcats envelope gene. column represents single SNP, row corresponds bobcat.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/Responsedata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Viral single nucleotide polymorphism (SNP) data — Responsedata","text":"","code":"if (FALSE) { # \\dontrun{   head(Responsedata) } # }"},{"path":"https://github.com/nfj1380/mrIML/reference/filterRareCommon.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter rare response variables from the data — filterRareCommon","title":"Filter rare response variables from the data — filterRareCommon","text":"Filter rare response variables data","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/filterRareCommon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter rare response variables from the data — filterRareCommon","text":"","code":"filterRareCommon(X, lower = lower, higher = higher)"},{"path":"https://github.com/nfj1380/mrIML/reference/filterRareCommon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter rare response variables from the data — filterRareCommon","text":"X data.frame rows sites individuals populations columns loci species OTUs. lower lower threshold value  response varialkes removed data.frame. higher upper threshold value  response varialkes removed data.frame.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/filterRareCommon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter rare response variables from the data — filterRareCommon","text":"function allows remove response units (OTUs SNPs species) response data preprocessing step. Suitable response binary outcome.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/filterRareCommon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter rare response variables from the data — filterRareCommon","text":"","code":"if (FALSE) { # \\dontrun{  X <- filterRareCommon (Responsedata, lower=0.4, higher=0.7)} # }"},{"path":"https://github.com/nfj1380/mrIML/reference/gfData.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression data from Fitzpatrick et al. 2014 — gfData","title":"Regression data from Fitzpatrick et al. 2014 — gfData","text":"Regression data Fitzpatrick et al. 2014","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/gfData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression data from Fitzpatrick et al. 2014 — gfData","text":"","code":"gfData"},{"path":"https://github.com/nfj1380/mrIML/reference/gfData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regression data from Fitzpatrick et al. 2014 — gfData","text":"data frame following columns: gfData Proportion individuals population SNP bioclimatic data (bio_1, bio_2, bio_7, bio_10, bio_15, bio_18) well spatial MEMs.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/gfData.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Regression data from Fitzpatrick et al. 2014 — gfData","text":"Fitzpatrick et al. 2014, Ecology Letters, doi: 10.1111/ele.12376","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/gfData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression data from Fitzpatrick et al. 2014 — gfData","text":"","code":"if (FALSE) { # \\dontrun{   head(gfData) } # }"},{"path":"https://github.com/nfj1380/mrIML/reference/mrBenchmark.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare and benchmark disease outbreak risk among and within groups — mrBenchmark","title":"Compare and benchmark disease outbreak risk among and within groups — mrBenchmark","text":"Compare benchmark disease outbreak risk among within groups","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrBenchmark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare and benchmark disease outbreak risk among and within groups — mrBenchmark","text":"","code":"mrBenchmark(   data = \"data\",   Y = \"class\",   pred = \"predicted\",   group = \"group1\",   label_by = \"ID\",   type = \"internal\" )"},{"path":"https://github.com/nfj1380/mrIML/reference/mrBenchmark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare and benchmark disease outbreak risk among and within groups — mrBenchmark","text":"data character object name data frame Y character column name variable containing outcome pred character column name variable containing model predicted values group character column name variable individuals grouped label_by character column name variable representing individual units. stated, labeled ggplot. default labels included type character specify within group \"internal\" among group \"external\" benchmarking","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrBenchmark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare and benchmark disease outbreak risk among and within groups — mrBenchmark","text":"","code":"mB <- mrBenchmark(data=data, Y='class') #> Error in parse(text = data): cannot coerce type 'closure' to vector of type 'character'"},{"path":"https://github.com/nfj1380/mrIML/reference/mrBootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap model predictions — mrBootstrap","title":"Bootstrap model predictions — mrBootstrap","text":"function bootstraps model predictions generates variable profiles response variable based provided yhats.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrBootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap model predictions — mrBootstrap","text":"","code":"mrBootstrap(   yhats,   num_bootstrap = 10,   Y = Y,   downsample = FALSE,   mode = \"classification\" )"},{"path":"https://github.com/nfj1380/mrIML/reference/mrBootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap model predictions — mrBootstrap","text":"yhats list model predictions (e.g., mrIMLpredicts). num_bootstrap number bootstrap samples generate (default: 10). Y response data. downsample Logical. bootstrap samples downsampled? (default: FALSE). mode character: 'classification' 'regression' depending model type.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrBootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap model predictions — mrBootstrap","text":"list containing bootstrap samples variable profiles response variable.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrBootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap model predictions — mrBootstrap","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage:  # Prepare response data Y <- dplyr::select(Bird.parasites, -scale.prop.zos) %>%         dplyr::select(sort(names(.))) # Response variables (e.g., SNPs, pathogens, species)  # Example list of yhats generated from mrIMLpredicts (assume yhats_rf is defined) yhats_rf <- mrIMLpredicts(...)  # Replace with actual code to generate yhats_rf  # Perform bootstrap analysis bs_analysis <- mrBootstrap(yhats = yhats_rf, Y = Y, num_bootstrap = 50, mode = 'classification') } # }"},{"path":"https://github.com/nfj1380/mrIML/reference/mrCoOccurNet_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a MrIML co-occurrence network — mrCoOccurNet_bootstrap","title":"Generate a MrIML co-occurrence network — mrCoOccurNet_bootstrap","text":"function generates co-occurrence network provided list calculates strength directionality relationships.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrCoOccurNet_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a MrIML co-occurrence network — mrCoOccurNet_bootstrap","text":"","code":"mrCoOccurNet_bootstrap(mrPD_obj, Y)"},{"path":"https://github.com/nfj1380/mrIML/reference/mrCoOccurNet_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a MrIML co-occurrence network — mrCoOccurNet_bootstrap","text":"mrPD_obj list model predictions. Y response data.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrCoOccurNet_bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a MrIML co-occurrence network — mrCoOccurNet_bootstrap","text":"dataframe representing co-occurrence network strength directionality.","code":""},{"path":[]},{"path":"https://github.com/nfj1380/mrIML/reference/mrFlashlight.html","id":null,"dir":"Reference","previous_headings":"","what":"mrFlashlight: Wrapper to run multi-response model agnostic interpretable machine learning analyses. — mrFlashlight","title":"mrFlashlight: Wrapper to run multi-response model agnostic interpretable machine learning analyses. — mrFlashlight","text":"mrFlashlight: Wrapper run multi-response model agnostic interpretable machine learning analyses.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrFlashlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mrFlashlight: Wrapper to run multi-response model agnostic interpretable machine learning analyses. — mrFlashlight","text":"","code":"mrFlashlight(   yhats,   X,   X1,   Y,   response = \"multi\",   index = 1,   mode = \"regression\",   predict_function = NULL )"},{"path":"https://github.com/nfj1380/mrIML/reference/mrFlashlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mrFlashlight: Wrapper to run multi-response model agnostic interpretable machine learning analyses. — mrFlashlight","text":"yhats list generated mrIMLpredicts. X data.frame containing feature data set. X1 data.frame additional predictors (optional). Y data.frame containing response variable data set (species, OTUs, SNPs, etc.). response character indicating type response: 'single' selects one response, 'multi' selects responses. index numeric used response 'single' select response create flashlight object . order Y. mode character indicating type model: 'classification' 'regression'. predict_function function specifying user-defined prediction function (optional).","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrFlashlight.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mrFlashlight: Wrapper to run multi-response model agnostic interpretable machine learning analyses. — mrFlashlight","text":"function enables users utilize interpretable machine learning methods understand multi-response single-response models.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrFlashlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mrFlashlight: Wrapper to run multi-response model agnostic interpretable machine learning analyses. — mrFlashlight","text":"","code":"# Single response fl <- mrFlashlight(yhats, X, Y, response = \"single\", index = 1, mode = \"regression\") #> Error in flashlight(model = yhats[[index]]$mod1_k, label = colnames(Y)[index],     data = cbind(Y[index], X), y = colnames(Y)[index], predict_function = pred_fun,     metrics = metrics): could not find function \"flashlight\" plot(light_performance(fl), fill = \"orange\") + labs(x = element_blank()) #> Error in light_performance(fl): could not find function \"light_performance\" plot(light_breakdown(fl, new_obs = cbind(X, Y)[1, ]), by = X, v = Y) #> Error in light_breakdown(fl, new_obs = cbind(X, Y)[1, ]): could not find function \"light_breakdown\" int <- light_interaction(fl, pairwise = TRUE) #> Error in light_interaction(fl, pairwise = TRUE): could not find function \"light_interaction\"  # Multiple response flashlightObj <- mrFlashlight(yhats, X, Y, response = \"multi\", mode = \"regression\") #> Error in eval(expr, envir, enclos): object 'yhats' not found"},{"path":"https://github.com/nfj1380/mrIML/reference/mrIMLperformance.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to calculate performance metrics (Mathews correlation coefficient, sensitivity and specificity) for each model for each response variable. — mrIMLperformance","title":"Wrapper to calculate performance metrics (Mathews correlation coefficient, sensitivity and specificity) for each model for each response variable. — mrIMLperformance","text":"Wrapper calculate performance metrics (Mathews correlation coefficient, sensitivity specificity) model response variable.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrIMLperformance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to calculate performance metrics (Mathews correlation coefficient, sensitivity and specificity) for each model for each response variable. — mrIMLperformance","text":"","code":"mrIMLperformance(yhats, Model, Y, mode = \"regression\")"},{"path":"https://github.com/nfj1380/mrIML/reference/mrIMLperformance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to calculate performance metrics (Mathews correlation coefficient, sensitivity and specificity) for each model for each response variable. — mrIMLperformance","text":"yhats list list generated mrIMLpredicts Model list  model used generate yhats object Y dataframe response variable data set (species, SNPs etc). mode character'classification' 'regression' .e., generative model regression classification?","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrIMLperformance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrapper to calculate performance metrics (Mathews correlation coefficient, sensitivity and specificity) for each model for each response variable. — mrIMLperformance","text":"Outputs dataframe commonly used metric can used compare model performance classification models. Performance metrics based testing data. MCC useful (higher numbers = better fit)","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrIMLperformance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper to calculate performance metrics (Mathews correlation coefficient, sensitivity and specificity) for each model for each response variable. — mrIMLperformance","text":"","code":"if (FALSE) { # \\dontrun{ ModelPerf <- mrIMLperformance(yhats, Model=model1, Y=Y) } # }"},{"path":"https://github.com/nfj1380/mrIML/reference/mrIMLpredicts.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to generate multi-response predictive models. — mrIMLpredicts","title":"Wrapper to generate multi-response predictive models. — mrIMLpredicts","text":"Wrapper generate multi-response predictive models.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrIMLpredicts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to generate multi-response predictive models. — mrIMLpredicts","text":"","code":"mrIMLpredicts(   X,   X1 = NULL,   Y,   Model,   balance_data = \"no\",   mode = \"regression\",   dummy = FALSE,   prop = 0.5,   morans = F,   tune_grid_size = 10,   k = 10,   racing = T,   seed = sample.int(1e+08, 1) )"},{"path":"https://github.com/nfj1380/mrIML/reference/mrIMLpredicts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to generate multi-response predictive models. — mrIMLpredicts","text":"X dataframe represents predictor feature data. X1 dataframe extra predictor set used model. MrIML Joint species distribution model (JSDM) just copy response data. Y dataframe response variable data (species, OTUs, SNPs etc). Model 1 list can model tidy model package. See examples. balance_data character '', '' ''. mode character'classification' 'regression' .e., generative model regression classification? dummy logical 'TRUE FALSE'. morans logical 'TRUE FALSE'. 'TRUE' global Morans calculated response tune_grid_size numeric sets grid size hyperparameter tuning. Larger grid sizes increase computational time. Ignored racing=T. k numeric sets number folds 10-fold cross-validation. 10 default. racing logical 'TRUE FALSE'. 'TRUE' MrIML performs grid search using 'racing' ANOVA method. See https://finetune.tidymodels.org/reference/tune_race_anova.html seed numeric models stochastic component, seed set make make analysis reproducible. Defaults 100 million 1.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrIMLpredicts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrapper to generate multi-response predictive models. — mrIMLpredicts","text":"function produces yhats used subsequent functions. function fits separate classification/regression models response variable data set.  Rows X (features) id (host/site/population) Y. Class imbalance can real issue classification analyses. Class imbalance can addressed response variable using '' (upsampling using ROSE bootstrapping), '' (downsampling) '' (balancing classes).","code":""},{"path":[]},{"path":"https://github.com/nfj1380/mrIML/reference/mrInteractions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and visualize feature interactions — mrInteractions","title":"Calculate and visualize feature interactions — mrInteractions","text":"function calculates visualizes interactions model using bootstrapping. provides overall, one-way, two-way interactions specified features.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrInteractions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and visualize feature interactions — mrInteractions","text":"","code":"mrInteractions(yhats, X, Y, num_bootstrap = 1, feature = feature, top.int = 10)"},{"path":"https://github.com/nfj1380/mrIML/reference/mrInteractions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and visualize feature interactions — mrInteractions","text":"yhats list model predictions. X predictor data. Y response data. num_bootstrap number bootstrap samples generate (default: 1). feature feature interactions need calculated. top.int number top interactions display (default: 10).","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrInteractions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and visualize feature interactions — mrInteractions","text":"list containing visualizations overall, one-way, two-way interactions, well interaction dataframes.","code":""},{"path":[]},{"path":"https://github.com/nfj1380/mrIML/reference/mrLocalExplainer.html","id":null,"dir":"Reference","previous_headings":"","what":"Run local explanation methods for individual data points — mrLocalExplainer","title":"Run local explanation methods for individual data points — mrLocalExplainer","text":"Run local explanation methods individual data points","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrLocalExplainer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run local explanation methods for individual data points — mrLocalExplainer","text":"","code":"mrLocalExplainer(X, Model, Y)"},{"path":"https://github.com/nfj1380/mrIML/reference/mrLocalExplainer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run local explanation methods for individual data points — mrLocalExplainer","text":"X dataframe data frame predictor variables Model workflow workflow object containing machine learning model Y vector vector containing outcome data instance","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrLocalExplainer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run local explanation methods for individual data points — mrLocalExplainer","text":"","code":"#mrLocalExplainer(X = data, Model = yhats, Y = data$Class) ## will return matrix of phi values, individualized and aggregated plots"},{"path":"https://github.com/nfj1380/mrIML/reference/mrPD_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Partial Dependence plots — mrPD_bootstrap","title":"Bootstrap Partial Dependence plots — mrPD_bootstrap","text":"function bootstraps model predictions generates partial dependence plots response variable. also creates combined plot top variables interest.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrPD_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Partial Dependence plots — mrPD_bootstrap","text":"","code":"mrPD_bootstrap(mrBootstrap_obj, vi_obj, X, Y, target, global_top_var = 2)"},{"path":"https://github.com/nfj1380/mrIML/reference/mrPD_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Partial Dependence plots — mrPD_bootstrap","text":"mrBootstrap_obj list model bootstraps generated using mrBootstrap function. vi_obj Variable Importance data. X predictor data. Y response data. target target variable generating plots. global_top_var number top variables consider (default: 2).","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrPD_bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Partial Dependence plots — mrPD_bootstrap","text":"list containing partial dependence plots response variable combined plot.","code":""},{"path":[]},{"path":"https://github.com/nfj1380/mrIML/reference/mrPerformancePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Model Performance Comparison — mrPerformancePlot","title":"Plot Model Performance Comparison — mrPerformancePlot","text":"Create visualizations compare performance two models based performance metrics.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrPerformancePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Model Performance Comparison — mrPerformancePlot","text":"","code":"mrPerformancePlot(   ModelPerf1 = NULL,   ModelPerf2 = NULL,   mod_names = c(\"combined\", \"Xonly_model\"),   mode = \"classification\" )"},{"path":"https://github.com/nfj1380/mrIML/reference/mrPerformancePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Model Performance Comparison — mrPerformancePlot","text":"ModelPerf1 Dataframe model performance metrics first model compare. ModelPerf2 Dataframe model performance metrics second model compare. mod_names Character vector model names. Default c('combined', 'Xonly_model'). mode Character string indicating whether mode 'classification' 'regression'. Default 'classification'.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrPerformancePlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Model Performance Comparison — mrPerformancePlot","text":"list containing: p1 ggplot object boxplot model performance metrics. p2 ggplot object barplot differences performance metrics. wide_df dataframe wide format model performance metrics differences.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrPerformancePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Model Performance Comparison — mrPerformancePlot","text":"","code":"plots <- mrPerformancePlot(ModelPerf1 =ModelPerf_lm, ModelPerf2 = ModelPerf_rf, mod_names=c('linear_reg','rand_forest'), mode='regression' ) #> Error in eval(expr, envir, enclos): object 'ModelPerf_lm' not found"},{"path":"https://github.com/nfj1380/mrIML/reference/mrPlot_interactions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots global interactions as well as individual response interaction importance. — mrPlot_interactions","title":"Plots global interactions as well as individual response interaction importance. — mrPlot_interactions","text":"Plots global interactions well individual response interaction importance.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrPlot_interactions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots global interactions as well as individual response interaction importance. — mrPlot_interactions","text":"","code":"mrPlot_interactions(interactions, X, Y, top_ranking = 3, top_response = 10)"},{"path":"https://github.com/nfj1380/mrIML/reference/mrPlot_interactions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots global interactions as well as individual response interaction importance. — mrPlot_interactions","text":"interactions dataframe data frame generated mrInteractioms function X dataframe feature data set Y dataframe response data set top_ranking numeric determines many strongest feature interacions view/include top_response numeric many response variables strongest interactions view","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrPlot_interactions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots global interactions as well as individual response interaction importance. — mrPlot_interactions","text":"1st plot: Barplots showing mean cumulative importance top pairs interactions model. 2nd plot: Barplot responses strongest interactions 3rd plot: Barplots strongest interactions top response variables. interactions <-mrInteractions(yhats, X, Y) #computationally intensive multicores needed. stopped prematurely - reload things mrPlot_interactions(Interact, X,Y, top_ranking = 3, top_response=3)","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrProfileplot.html","id":null,"dir":"Reference","previous_headings":"","what":"mrProfileplot: Wrapper to plot mutlti-response model agnostic profile plots (partial dependences and accumulated local effects). — mrProfileplot","title":"mrProfileplot: Wrapper to plot mutlti-response model agnostic profile plots (partial dependences and accumulated local effects). — mrProfileplot","text":"mrProfileplot:  Wrapper plot mutlti-response model agnostic profile plots (partial dependences accumulated local effects).","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrProfileplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mrProfileplot: Wrapper to plot mutlti-response model agnostic profile plots (partial dependences and accumulated local effects). — mrProfileplot","text":"","code":"mrProfileplot(profileData, sdthresh = 0.05)"},{"path":"https://github.com/nfj1380/mrIML/reference/mrProfileplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mrProfileplot: Wrapper to plot mutlti-response model agnostic profile plots (partial dependences and accumulated local effects). — mrProfileplot","text":"profileData dataframe data generated flashlight packages 'light_profile' function. 'sdthresh' numeric value used filter responses changing across values feature (based standard deviation)","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrProfileplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mrProfileplot: Wrapper to plot mutlti-response model agnostic profile plots (partial dependences and accumulated local effects). — mrProfileplot","text":"aim function plot (1) reduced set response variables responding feature choice (plot 1) average ALE partial dependency  responses combined (plot 2). many responses plot 1 makes interpretation easier focussing responses changing feature. feature selected plot type must specified 'light_profile' function","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrProfileplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mrProfileplot: Wrapper to plot mutlti-response model agnostic profile plots (partial dependences and accumulated local effects). — mrProfileplot","text":"","code":"flashlightObj <- mrFlashlight(yhats, X, Y, response = \"multi\") #> Error in eval(expr, envir, enclos): object 'yhats' not found  profileData_pd <- light_profile(flashlightObj, v = \"Grassland\") #partial dependencies #> Error in light_profile(flashlightObj, v = \"Grassland\"): could not find function \"light_profile\" profileData_ale <- light_profile(flashlightObj, v = \"Grassland\", type = \"ale\") #acumulated local effects #> Error in light_profile(flashlightObj, v = \"Grassland\", type = \"ale\"): could not find function \"light_profile\" mrProfileplot(profileData_pd , sdthresh =0.05) #> Error in eval(expr, envir, enclos): object 'profileData_pd' not found mrProfileplot(profileData_ale , sdthresh =0.05) #> Error in eval(expr, envir, enclos): object 'profileData_ale' not found"},{"path":"https://github.com/nfj1380/mrIML/reference/mrVip.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates and helps interpret variable importance for mrIML models. — mrvip","title":"Calculates and helps interpret variable importance for mrIML models. — mrvip","text":"Calculates helps interpret variable importance mrIML models.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrVip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates and helps interpret variable importance for mrIML models. — mrvip","text":"","code":"mrvip(   yhats = NULL,   mrBootstrap_obj = NULL,   X = X,   X1 = NULL,   Y = Y,   mode = \"classification\",   threshold = 0.1,   global_top_var = 10,   local_top_var = 5,   taxa = NULL,   ModelPerf = ModelPerf,   plot.pca = T )"},{"path":"https://github.com/nfj1380/mrIML/reference/mrVip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates and helps interpret variable importance for mrIML models. — mrvip","text":"yhats list model predictions. mrBootstrap_obj object containing model bootstrapping results. X predictor data. X1 dataframe extra predictor set used model. MrIML Joint species distribution model (JSDM) just copy response data. Y response data. mode character'classification' 'regression' .e., generative model regression classification? threshold threshold model performance (AUC) variables filtered (default: 0.1). global_top_var number top global variables display (default: 10). local_top_var number top local variables response display (default: 5). ModelPerf list containing model performance metrics response variable.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mrVip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates and helps interpret variable importance for mrIML models. — mrvip","text":"list containing variable importance data combined plot.","code":""},{"path":[]},{"path":"https://github.com/nfj1380/mrIML/reference/mr_Covar.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate covariate partial dependencies for mrIML JSDMs (Joint species distirbution models) — mr_Covar","title":"Calculate covariate partial dependencies for mrIML JSDMs (Joint species distirbution models) — mr_Covar","text":"function calculates covariate partial dependency plot specified environmental/host variable. also filters taxa based standard deviation thresholds visualizes results.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mr_Covar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate covariate partial dependencies for mrIML JSDMs (Joint species distirbution models) — mr_Covar","text":"","code":"mr_Covar(yhats, Y, X, X1, var, sdthresh = 0.05)"},{"path":"https://github.com/nfj1380/mrIML/reference/mr_Covar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate covariate partial dependencies for mrIML JSDMs (Joint species distirbution models) — mr_Covar","text":"yhats list model predictions. Y response data. X predictor data. X1 Additional predictor data excluding variable interest. var variable interest calculating profile. sdthresh standard deviation threshold filtering taxa (default: 0.05).","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/mr_Covar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate covariate partial dependencies for mrIML JSDMs (Joint species distirbution models) — mr_Covar","text":"plot displaying covariate profile change probability specified variable.","code":""},{"path":[]},{"path":"https://github.com/nfj1380/mrIML/reference/readSnpsPed.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion to single column per locus from plink file via LEA functionality — readSnpsPed","title":"Conversion to single column per locus from plink file via LEA functionality — readSnpsPed","text":"Conversion single column per locus plink file via LEA functionality","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/readSnpsPed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion to single column per locus from plink file via LEA functionality — readSnpsPed","text":"","code":"readSnpsPed(pedfile, mapfile)"},{"path":"https://github.com/nfj1380/mrIML/reference/readSnpsPed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion to single column per locus from plink file via LEA functionality — readSnpsPed","text":"pedfile dataframe dataframe generated mrvip function mapfile dataframe response dataset","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/readSnpsPed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conversion to single column per locus from plink file via LEA functionality — readSnpsPed","text":"Function import SNP data plink format format suitable MrIML predicts (presence/absence alelle locus). Currently missing data (NAs) either imputes mode leaves . histogram also produced missing data.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/readSnpsPed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion to single column per locus from plink file via LEA functionality — readSnpsPed","text":"","code":"if (FALSE) snps <- readSnpsPed(\"bobcat.plink.ped\", \"bobcat.plink.map.map\") #NAs in data and interpolated as the mode.  X <- filterRareCommon (snps, lower=0.4, higher=0.7) #these are harsh # \\dontrun{} #> Error in eval(expr, envir, enclos): object 'snps' not found"},{"path":"https://github.com/nfj1380/mrIML/reference/resist_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates resistance components from a list of pairwise resistance surfaces. — resist_components","title":"Calculates resistance components from a list of pairwise resistance surfaces. — resist_components","text":"Calculates resistance components list pairwise resistance surfaces.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/resist_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates resistance components from a list of pairwise resistance surfaces. — resist_components","text":"","code":"resist_components(foldername = foldername, p_val = p_val)"},{"path":"https://github.com/nfj1380/mrIML/reference/resist_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates resistance components from a list of pairwise resistance surfaces. — resist_components","text":"foldername character location resistance surfaces stored. p_val numeric sets significance threshold axes explaining variance original resistance matrix based redundancy analysis. effect filters axes dont explain variance.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/resist_components.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates resistance components from a list of pairwise resistance surfaces. — resist_components","text":"Outputs data frame significant resistance components matrix target folder. data can combined non-pairwise matrix data.","code":""},{"path":"https://github.com/nfj1380/mrIML/reference/resist_components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates resistance components from a list of pairwise resistance surfaces. — resist_components","text":"","code":"Y <- resist_components(filename = 'Bobcat_cs_matrices', p_val=0.01) #> Error in resist_components(filename = \"Bobcat_cs_matrices\", p_val = 0.01): unused argument (filename = \"Bobcat_cs_matrices\")"},{"path":"https://github.com/nfj1380/mrIML/news/index.html","id":"mriml-101","dir":"Changelog","previous_headings":"","what":"mrIML 1.0.1","title":"mrIML 1.0.1","text":"Initial release github Initial functions vignettes","code":""},{"path":"https://github.com/nfj1380/mrIML/news/index.html","id":"mriml-201","dir":"Changelog","previous_headings":"","what":"mrIML 2.0.1","title":"mrIML 2.0.1","text":"New functionality allow MrIML perform joint species distribution models (JSDMs) New bootstrap functions vignette Can also harness deep neural network models","code":""}]
